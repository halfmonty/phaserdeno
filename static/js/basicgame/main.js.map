{
  "version": 3,
  "sources": ["../../../games/basicgame/main.ts", "../../../games/basicgame/scenes/game.ts"],
  "sourcesContent": ["import Phaser from 'https://esm.sh/phaser@4.0.0-rc.4';\r\nimport Game from \"./scenes/game.ts\";\r\n\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n    width: 800, \r\n    height: 600,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH\r\n    },\r\n    autoRound: false,\r\n    parent: \"game-container\",\r\n    physics: {\r\n\t\t\tdefault: 'arcade',\r\n\t\t\tarcade: {\r\n\t\t\t\tgravity: { x: 0, y: 350 },\r\n\t\t\t\tdebug: false,\r\n\t\t\t},\r\n\t\t},\r\n    scene: [Game],\r\n};\r\n\r\nconst game = new Phaser.Game(config);", "export default class Game extends Phaser.Scene {\r\n    player!: Phaser.Physics.Arcade.Sprite;\r\n    platforms!: Phaser.Physics.Arcade.StaticGroup;\r\n    cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\r\n    score = 0;\r\n    scoreText!: Phaser.GameObjects.Text;\r\n    stars!: Phaser.Physics.Arcade.Group;\r\n\r\n    constructor() {\r\n        super({ key: 'GameScene' });\r\n    }\r\n\r\n    preload() {\r\n        this.load.image('sky', 'assets/basicgame/sky.png');\r\n        this.load.image('ground', 'assets/basicgame/platform.png');\r\n        this.load.image('star', 'assets/basicgame/star.png');\r\n        this.load.image('bomb', 'assets/basicgame/bomb.png');\r\n        this.load.spritesheet('dude', 'assets/basicgame/dude.png', { frameWidth: 32, frameHeight: 48 })\r\n    }\r\n\r\n    create() {\r\n        this.add.image(400, 300, 'sky');\r\n\r\n        this.platforms = this.physics.add.staticGroup();\r\n        this.platforms.create(400, 568, 'ground').setScale(2).refreshBody();\r\n        this.platforms.create(600, 400, 'ground');\r\n        this.platforms.create(50, 250, 'ground');\r\n        this.platforms.create(750, 220, 'ground');\r\n\r\n        this.player = this.physics.add.sprite(100, 450, 'dude');\r\n        this.player.setBounce(0.2);\r\n        this.player.setCollideWorldBounds(true);\r\n\r\n        this.anims.create({\r\n            key: 'left',\r\n            frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n\r\n        this.anims.create({\r\n            key: 'turn',\r\n            frames: [{ key: 'dude', frame: 4 }],\r\n            frameRate: 20\r\n        });\r\n\r\n        this.anims.create({\r\n            key: 'right',\r\n            frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n\r\n        this.physics.add.collider(this.player, this.platforms);\r\n\r\n        this.stars = this.physics.add.group({\r\n            key: 'star',\r\n            repeat: 11,\r\n            setXY: { x: 12, y: 0, stepX: 70 }\r\n        });\r\n\r\n        this.stars.children.forEach((star) => {\r\n            const starSprite = star as Phaser.Physics.Arcade.Sprite\r\n            starSprite.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));\r\n\r\n        });\r\n\r\n        this.physics.add.collider(this.stars, this.platforms);\r\n\r\n        // Collect stars\r\n        this.physics.add.overlap(\r\n            this.player,\r\n            this.stars,\r\n            this.collectStar as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n            undefined,\r\n            this,\r\n        );\r\n\r\n        // Create cursor keys\r\n        this.cursors = this.input.keyboard!.createCursorKeys();\r\n\r\n        // Score text\r\n        this.scoreText = this.add.text(16, 16, 'Score: 0', {\r\n            fontSize: '32px',\r\n            color: '#ffffff',\r\n        });\r\n\r\n        // Instructions\r\n        this.add.text(400, 100, 'Use Arrow Keys to Move\\nCollect Yellow Stars!', {\r\n            fontSize: '24px',\r\n            color: '#ffffff',\r\n            align: 'center',\r\n        }).setOrigin(0.5);\r\n    }\r\n\r\n    override update(time: number, delta: number): void {\r\n        if (this.cursors.left.isDown) {\r\n            this.player.setVelocityX(-160);\r\n\r\n            this.player.anims.play('left', true);\r\n        }\r\n        else if (this.cursors.right.isDown) {\r\n            this.player.setVelocityX(160);\r\n\r\n            this.player.anims.play('right', true);\r\n        }\r\n        else {\r\n            this.player.setVelocityX(0);\r\n\r\n            this.player.anims.play('turn');\r\n        }\r\n\r\n        if (this.cursors.up.isDown && this.player.body?.touching.down) {\r\n            this.player.setVelocityY(-330);\r\n        }\r\n    }\r\n\r\n    private collectStar = (\r\n        _player: Phaser.Physics.Arcade.Sprite,\r\n        star: Phaser.Physics.Arcade.Sprite,\r\n    ) => {\r\n        star.disableBody(true, true);\r\n\r\n        if (this.stars.countActive(true) === 0) {\r\n            this.stars.children.forEach((child) => {\r\n                (child as Phaser.Physics.Arcade.Sprite).enableBody(\r\n                    true,\r\n                    (child as any).x,\r\n                    0,\r\n                    true,\r\n                    true,\r\n                );\r\n            });\r\n        }\r\n        this.score += 10;\r\n        this.scoreText.setText('Score: ' + this.score);\r\n    };\r\n}"],
  "mappings": "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",
  "names": ["Phaser", "Phaser"]
}
