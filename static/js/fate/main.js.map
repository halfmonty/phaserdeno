{
  "version": 3,
  "sources": ["../../../games/fate/main.ts", "../../../games/fate/scenes/bootloader.ts"],
  "sourcesContent": ["import Phaser from 'https://esm.sh/phaser@3.52.0';\r\nimport { enable3d, Canvas } from 'https://esm.sh/@enable3d/phaser-extension@0.25.4';\r\nimport Bootloader from \"./scenes/bootloader.ts\";\r\n// import Outro from \"./scenes/outro.ts\";\r\n// import GameOver from \"./scenes/game_over.ts\";\r\n// import Splash from \"./scenes/splash.ts\";\r\n// import Story from \"./scenes/story.ts\";\r\n// import Game from \"./scenes/game.ts\";\r\n\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n    type: Phaser.WEBGL,\r\n    transparent: true,\r\n    width: 600,\r\n    height: 300,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n    },\r\n    parent: 'game-container',\r\n    scene: [Bootloader],\r\n    // scene: [Bootloader, Story, Splash, Game, Outro, GameOver],\r\n    ...Canvas(),\r\n};\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n  enable3d(() => new Phaser.Game(config)).withPhysics(\"./assets/fate/ammo\");\r\n});", "import { Scene3D } from 'https://esm.sh/@enable3d/phaser-extension@0.25.4';\r\n\r\nexport default class Bootloader extends Scene3D {\r\n    progressBar!: Phaser.GameObjects.Graphics;\r\n    loadBar!: Phaser.GameObjects.Graphics;\r\n\r\n\tconstructor() {\r\n\t\tsuper({ key: 'bootloader' });\r\n\t}\r\n\r\n\t/*\r\n    We use the preload method to call the methods to load all our assets.\r\n    */\r\n\tpreload() {\r\n\t\tthis.createBars();\r\n\t\tthis.setLoadEvents();\r\n\t\tthis.loadFonts();\r\n\t\tthis.loadImages();\r\n\t\tthis.loadAudios();\r\n\t\tthis.loadVideos();\r\n\t\tthis.setRegistry();\r\n\t}\r\n\r\n\t/*\r\n    This is a method to set the events that will be triggered when the loading is progressing and when it is complete.\r\n    */\r\n\tsetLoadEvents() {\r\n\t\tthis.load.on(\r\n\t\t\t'progress',\r\n\t\t\t(value: number) => {\r\n\t\t\t\tthis.progressBar.clear();\r\n\t\t\t\tthis.progressBar.fillStyle(0x03a062, 1);\r\n\t\t\t\tthis.progressBar.fillRect(\r\n\t\t\t\t\tthis.cameras.main.width / 4,\r\n\t\t\t\t\tthis.cameras.main.height / 2 - 16,\r\n\t\t\t\t\t(this.cameras.main.width / 2) * value,\r\n\t\t\t\t\t16,\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tthis,\r\n\t\t);\r\n\t\tthis.load.on(\r\n\t\t\t'complete',\r\n\t\t\t() => {\r\n\t\t\t\tthis.scene.start('story');\r\n\t\t\t},\r\n\t\t\tthis,\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n    This is a method to load the fonts.\r\n    */\r\n\tloadFonts() {\r\n\t\tthis.load.bitmapFont(\r\n\t\t\t'pixelFont',\r\n\t\t\t'assets/fonts/mario.png',\r\n\t\t\t'assets/fonts/mario.xml',\r\n\t\t);\r\n\t\tthis.load.bitmapFont(\r\n\t\t\t'computer',\r\n\t\t\t'assets/fonts/computer.png',\r\n\t\t\t'assets/fonts/computer.xml',\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n    We load this logo that looks old to match the style of the splash.\r\n    */\r\n\tloadImages() {\r\n\t\tthis.load.image('pello_logo_old', 'assets/images/pello_logo_old.png');\r\n\t}\r\n\r\n\t/*\r\n    We need to keep track of the deviation -hits- and the number of probes.\r\n    */\r\n\tsetRegistry() {\r\n\t\tthis.registry.set('deviation', '0');\r\n\t\tthis.registry.set('probes', '20');\r\n\t}\r\n\r\n\t/*\r\n    We load the sounds and the music.\r\n    */\r\n\tloadAudios() {\r\n\t\tArray(4)\r\n\t\t\t.fill(0)\r\n\t\t\t.forEach((e, i) => {\r\n\t\t\t\tthis.load.audio(`thunder${i}`, `./assets/sounds/thunder${i}.mp3`);\r\n\t\t\t});\r\n\t\tArray(2)\r\n\t\t\t.fill(0)\r\n\t\t\t.forEach((e, i) => {\r\n\t\t\t\tthis.load.audio(`passby${i}`, `./assets/sounds/passby${i}.mp3`);\r\n\t\t\t});\r\n\t\tArray(4)\r\n\t\t\t.fill(0)\r\n\t\t\t.forEach((_, i) => {\r\n\t\t\t\tthis.load.audio(`hit${i + 1}`, `assets/sounds/hit${i + 1}.mp3`);\r\n\t\t\t});\r\n\t\tthis.load.image('logo', 'assets/images/logo.png');\r\n\t\tthis.load.audio('hymn', 'assets/sounds/hymn.mp3');\r\n\t\tthis.load.audio('music', 'assets/sounds/music.mp3');\r\n\t\tthis.load.audio('type', 'assets/sounds/type.mp3');\r\n\t\tthis.load.audio('shot', 'assets/sounds/shot.mp3');\r\n\t\tthis.load.audio('voice_start', 'assets/sounds/voice_start.mp3');\r\n\t\tthis.load.audio('voice_drop', 'assets/sounds/voice_drop.mp3');\r\n\t\tthis.load.audio('voice_hit', 'assets/sounds/voice_hit.mp3');\r\n\t}\r\n\r\n\t/*\r\n    In this game, we are using videos! They will be player in the presentation scene that comes before the Splash.\r\n    */\r\n\tloadVideos() {\r\n\t\t// Array(4)\r\n\t\t// \t.fill(0)\r\n\t\t// \t.forEach((e, i) => {\r\n\t\t// \t\tthis.load.video(\r\n\t\t// \t\t\t`video${i}`,\r\n\t\t// \t\t\t`./assets/videos/video${i}.mp4`,\r\n\t\t// \t\t\t'loadeddata',\r\n\t\t// \t\t\tfalse,\r\n\t\t// \t\t\ttrue,\r\n\t\t// \t\t);\r\n\t\t// \t});\r\n\t}\r\n\r\n\t/*\r\n    As you may already now, this is a method to create the loading bars.\r\n    */\r\n\tcreateBars() {\r\n\t\tthis.loadBar = this.add.graphics();\r\n\t\tthis.loadBar.fillStyle(0x06e18a, 1);\r\n\t\tthis.loadBar.fillRect(\r\n\t\t\tthis.cameras.main.width / 4 - 2,\r\n\t\t\tthis.cameras.main.height / 2 - 18,\r\n\t\t\tthis.cameras.main.width / 2 + 4,\r\n\t\t\t20,\r\n\t\t);\r\n\t\tthis.progressBar = this.add.graphics();\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
