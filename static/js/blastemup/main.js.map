{
  "version": 3,
  "sources": ["../../../games/blastemup/main.ts", "../../../games/blastemup/scenes/bootloader.ts", "../../../games/blastemup/gameobjects/particle.ts", "../../../games/blastemup/gameobjects/player.ts", "../../../games/blastemup/status.ts", "../../../games/blastemup/scenes/game.ts"],
  "sourcesContent": ["import Phaser from 'https://esm.sh/phaser@4.0.0-rc.4';\r\nimport Bootloader from './scenes/bootloader.ts';\r\nimport Game from './scenes/game.ts';\r\n\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n\tuseTicker: true,\r\n\twidth: 868,\r\n\theight: 800,\r\n\tscale: {\r\n\t\tmode: Phaser.Scale.FIT,\r\n\t\tautoCenter: Phaser.Scale.CENTER_BOTH,\r\n\t},\r\n\tparent: 'game-container',\r\n\tautoRound: false,\r\n\tphysics: {\r\n\t\tdefault: 'arcade',\r\n\t\tarcade: {\r\n\t\t\tgravity: { x: 0, y: 0 },\r\n\t\t\tdebug: false,\r\n\t\t},\r\n\t},\r\n\tplugins: {},\r\n\tscene: [Bootloader, Game],\r\n};\r\n\r\nconst game = new Phaser.Game(config);\r\n", "export default class Bootloader extends Phaser.Scene {\r\n    progressBar!: Phaser.GameObjects.Graphics;\r\n    loadBar!: Phaser.GameObjects.Graphics;\r\n\r\n  constructor() {\r\n    super({ key: \"bootloader\" });\r\n  }\r\n\r\n  preload() {\r\n    this.createBars();\r\n    this.load.on(\r\n      \"progress\",\r\n      (value: number) => {\r\n        this.progressBar.clear();\r\n        this.progressBar.fillStyle(0x88d24c, 1);\r\n        this.progressBar.fillRect(\r\n          this.cameras.main.width / 4,\r\n          this.cameras.main.height / 2 - 16,\r\n          (this.cameras.main.width / 2) * value,\r\n          16\r\n        );\r\n      },\r\n      this\r\n    );\r\n    this.load.on(\r\n      \"complete\",\r\n      () => {\r\n        this.scene.start(\"game\");\r\n      },\r\n      this\r\n    );\r\n\r\n    Array(6)\r\n      .fill(0)\r\n      .forEach((_, i) => {\r\n        this.load.audio(`muzik${i}`, `assets/blastemup/sounds/muzik${i}.mp3`);\r\n      });\r\n\r\n    this.load.image(\"ship1_1\", \"assets/blastemup/images/starship.png\");\r\n    this.load.image(\"foeship\", \"assets/blastemup/images/foeship.png\");\r\n    this.load.image(\"pello\", \"assets/blastemup/images/pello.png\");\r\n    this.load.image(\"hex\", \"assets/blastemup/images/hex64.png\");\r\n    this.load.image(\"asteroid\", \"assets/blastemup/images/asteroid.png\");\r\n    this.load.audio(\"splash\", \"assets/blastemup/sounds/splash.mp3\");\r\n    this.load.audio(\"game-over\", \"assets/blastemup/sounds/game-over.mp3\");\r\n    this.load.audio(\"explosion\", \"assets/blastemup/sounds/explosion.mp3\");\r\n    this.load.audio(\"shot\", \"assets/blastemup/sounds/shot.mp3\");\r\n    this.load.audio(\"foeshot\", \"assets/blastemup/sounds/foeshot.mp3\");\r\n    this.load.audio(\"pick\", \"assets/blastemup/sounds/pick.mp3\");\r\n    this.load.audio(\"asteroid\", \"assets/blastemup/sounds/asteroid.mp3\");\r\n\r\n    this.load.bitmapFont(\r\n      \"arcade\",\r\n      \"assets/blastemup/fonts/arcade.png\",\r\n      \"assets/blastemup/fonts/arcade.xml\"\r\n    );\r\n    this.load.bitmapFont(\r\n      \"wendy\",\r\n      \"assets/blastemup/fonts/arcade.png\",\r\n      \"assets/blastemup/fonts/wendy.xml\"\r\n    );\r\n    this.load.bitmapFont(\r\n      \"starshipped\",\r\n      \"assets/blastemup/fonts/starshipped.png\",\r\n      \"assets/blastemup/fonts/starshipped.xml\"\r\n    );\r\n    this.load.spritesheet(\"shot\", \"assets/blastemup/images/shot.png\", {\r\n      frameWidth: 32,\r\n      frameHeight: 32,\r\n    });\r\n    this.load.spritesheet(\"shotfoe\", \"assets/blastemup/images/shotfoe.png\", {\r\n      frameWidth: 32,\r\n      frameHeight: 32,\r\n    });\r\n    this.load.spritesheet(\"energy\", \"assets/blastemup/images/energy.png\", {\r\n      frameWidth: 32,\r\n      frameHeight: 32,\r\n    });\r\n  }\r\n\r\n  create() {}\r\n\r\n  createBars() {\r\n    this.loadBar = this.add.graphics();\r\n    this.loadBar.fillStyle(0x008483, 1);\r\n    this.loadBar.fillRect(\r\n      this.cameras.main.width / 4 - 2,\r\n      this.cameras.main.height / 2 - 18,\r\n      this.cameras.main.width / 2 + 4,\r\n      20\r\n    );\r\n    this.progressBar = this.add.graphics();\r\n  }\r\n}", "class Particle extends Phaser.GameObjects.Rectangle {\r\n\tdeclare body: Phaser.Physics.Arcade.Body;\r\n\r\n\tconstructor(\r\n\t\tscene: Phaser.Scene,\r\n\t\tx: number,\r\n\t\ty: number,\r\n\t\tcolor = 0xffffff,\r\n\t\tsize = 4,\r\n\t\talpha = 1,\r\n\t) {\r\n\t\tsuper(scene, x, y, size, size, color, alpha);\r\n\t\tthis.name = 'bubble';\r\n\t\tthis.scene = scene;\r\n\t\tthis.alpha = alpha;\r\n\t\tthis.setOrigin(0.5);\r\n\t\tscene.add.existing(this);\r\n\t\tscene.physics.add.existing(this);\r\n\t\tthis.body.setAllowGravity(false);\r\n\t\tthis.init();\r\n\t}\r\n\r\n\tinit() {\r\n\t\tthis.scene.tweens.add({\r\n\t\t\ttargets: this,\r\n\t\t\tduration: Phaser.Math.Between(600, 1000),\r\n\t\t\tscale: { from: 1, to: 3 },\r\n\t\t\talpha: { from: this.alpha, to: 0 },\r\n\t\t\tonComplete: () => {\r\n\t\t\t\tthis.destroy();\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default Particle;\r\n", "import Game from '../scenes/game.ts';\r\nimport Particle from './particle.ts';\r\n\r\nclass Player extends Phaser.GameObjects.Sprite {\r\n\tdeclare scene: Game;\r\n\tdeclare body: Phaser.Physics.Arcade.Body;\r\n\tspeed: number;\r\n\tfriction: number;\r\n\tdeath: boolean;\r\n\tcursor!: Phaser.Types.Input.Keyboard.CursorKeys;\r\n\tupDelta!: number;\r\n\toldPosition?: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\trotation: number;\r\n\t};\r\n\r\n\tconstructor(scene: Phaser.Scene, x: number, y: number, name: string) {\r\n\t\tsuper(scene, x, y, 'ship1_1');\r\n\t\tthis.scene = scene as Game;\r\n\t\tthis.name = name;\r\n\t\tthis.tint = Math.random() * 0xffffff;\r\n\t\tscene.add.existing(this);\r\n\t\tscene.physics.add.existing(this);\r\n\t\tthis.body.setAllowGravity(false);\r\n\t\tthis.body.setCircle(26);\r\n\t\tthis.body.setOffset(6, 9);\r\n\t\tthis.body.setBounce(0.8);\r\n\t\tthis.angle = 0;\r\n\t\tthis.speed = 0;\r\n\t\tthis.friction = 0.95;\r\n\t\tthis.death = false;\r\n\t\tthis.init();\r\n\t}\r\n\r\n\t/*\r\nSets the controls for both cursor keys. Also sets default prooperties for body.\r\n\t*/\r\n\tinit() {\r\n\t\tthis.cursor = this.scene.input.keyboard?.createCursorKeys() ?? (() => {\r\n\t\t\tthrow ('Failed to get keyboard input');\r\n\t\t})();\r\n\t\tthis.scene.events.on('update', this.update, this);\r\n\t\tthis.body.setDrag(300);\r\n\t\tthis.body.setAngularDrag(400);\r\n\t\tthis.body.setMaxVelocity(600);\r\n\t\tthis.upDelta = 0;\r\n\t}\r\n\r\n\t/*\r\nThis is a getter so we can get the unique identifier from the name of the player.\r\n\t*/\r\n\tget key() {\r\n\t\treturn this.name.split(':')[1];\r\n\t}\r\n\r\n\t/*\r\nThe update loop is used to move the spaceship according to the user input. When the player moves to right/left the body of the ship will rotate, when moving up it will gain velocity. Randomly, a trailing particle will be added.\r\n\t*/\r\n\toverride update(_timestep: number, delta: number) {\r\n\t\tif (this.death) return;\r\n\t\tif (this.scene.player.key == this.key) {\r\n\t\t\tif (this.cursor.left.isDown) {\r\n\t\t\t\tthis.body.setAngularVelocity(-150);\r\n\t\t\t} else if (this.cursor.right.isDown) {\r\n\t\t\t\tthis.body.setAngularVelocity(150);\r\n\t\t\t} else {\r\n\t\t\t\tthis.body.setAngularVelocity(0);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.cursor.up.isDown) {\r\n\t\t\t\tthis.upDelta += delta;\r\n\t\t\t\tif (this.upDelta > 200) {\r\n\t\t\t\t\tthis.upDelta = 0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.body.setVelocity(\r\n\t\t\t\t\tMath.cos(this.rotation) * 300,\r\n\t\t\t\t\tMath.sin(this.rotation) * 300,\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthis.body.setAcceleration(0);\r\n\t\t\t}\r\n\r\n\t\t\tif (Phaser.Math.Between(1, 4) > 1) {\r\n\t\t\t\tthis.scene.thrust.add(\r\n\t\t\t\t\tnew Particle(this.scene, this.x, this.y, 0xffffff, 10),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\toverride destroy() {\r\n\t\tthis.death = true;\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n\r\nexport default Player;\r\n", "export const NEW_PLAYER = \"newPlayer\";\r\nexport const CURRENT_PLAYERS = \"currentPlayers\";\r\nexport const PLAYER_DISCONNECTED = \"playerDisconnected\";\r\nexport const PLAYER_IS_MOVING = \"playerIsMoving\";\r\nexport const PLAYER_MOVED = \"playerMoved\";", "import Player from '../gameobjects/player.ts';\r\nimport {\r\n\tCURRENT_PLAYERS,\r\n\tNEW_PLAYER,\r\n\tPLAYER_DISCONNECTED,\r\n\tPLAYER_IS_MOVING,\r\n\tPLAYER_MOVED,\r\n} from '../status.ts';\r\n\r\nexport default class Game extends Phaser.Scene {\r\n\tid: number | null = null;\r\n\tsocket?: WebSocket;\r\n\tenemies!: Record<string, Player>;\r\n\tenemyPlayers!: Phaser.Physics.Arcade.Group;\r\n\tplayer!: Player;\r\n\tthrust!: Phaser.GameObjects.Layer;\r\n\taudios!: Record<\r\n\t\tstring,\r\n\t\t| Phaser.Sound.NoAudioSound\r\n\t\t| Phaser.Sound.HTML5AudioSound\r\n\t\t| Phaser.Sound.WebAudioSound\r\n\t>;\r\n\ttheme!:\r\n\t\t| Phaser.Sound.NoAudioSound\r\n\t\t| Phaser.Sound.HTML5AudioSound\r\n\t\t| Phaser.Sound.WebAudioSound;\r\n\r\n\tconstructor() {\r\n\t\tsuper({ key: 'game' });\r\n\t}\r\n\r\n\tcreate() {\r\n\t\tthis.id = null;\r\n\r\n\t\tthis.startSockets();\r\n\t\tthis.loadAudios();\r\n\t\tthis.playMusic();\r\n\t\t// this.addColliders();\r\n\t}\r\n\r\n\t/*\r\nThis is where the connection with the server is established and we set listeners for events that we will receive from that server. Through those listeners, we will be aware of new players, player movement and player destroy events. We need to add that `.bind(this)` to this event callback to make the elements of this class reachable. In this case, we separate the group of enemies in a hash and their physical group with `this.enemyPlayers` to set the collisions. But we could just use the physical group.\r\n\t*/\r\n\tstartSockets() {\r\n\t\tthis.socket = new WebSocket('ws://localhost:3000/ws/blastemup/');\r\n\r\n\t\tthis.socket.onopen = () => {\r\n\t\t\tconsole.log('Connected to WebSocket server');\r\n\t\t\tthis.addPlayer();\r\n\t\t};\r\n\r\n\t\tthis.socket.onmessage = (event) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst data = JSON.parse(event.data);\r\n\t\t\t\tthis.handleMessage(data.type, data.payload);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Error parsing WebSocket message:', error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.socket.onclose = () => {\r\n\t\t\tconsole.log('WebSocket connection closed');\r\n\t\t\tthis.destroy();\r\n\t\t};\r\n\r\n\t\tthis.enemies = {};\r\n\t\tthis.enemyPlayers = this.physics.add.group();\r\n\t}\r\n\r\n\thandleMessage(type: string, payload: any) {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'newPlayer':\r\n\t\t\t\tthis.addEnemyPlayers(payload);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'currentPlayers':\r\n\t\t\t\tObject.keys(payload as object).forEach((key) => {\r\n\t\t\t\t\tif (!this.enemies[key] && key !== this.player.key) {\r\n\t\t\t\t\t\tthis.addEnemyPlayers(payload[key]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'playerMoved':\r\n\t\t\t\t{\r\n\t\t\t\t\tconst [_name, key] = payload.name.split(':');\r\n\t\t\t\t\tif (this.enemies[key]) {\r\n\t\t\t\t\t\tthis.enemies[key].setRotation(payload.rotation);\r\n\t\t\t\t\t\tthis.enemies[key].setPosition(payload.x, payload.y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'playerDisconnected':\r\n\t\t\t\tthis.enemyPlayers.getChildren().forEach((otherPlayer) => {\r\n\t\t\t\t\tconst op = otherPlayer as Player;\r\n\t\t\t\t\tif (payload === op.key) {\r\n\t\t\t\t\t\totherPlayer.destroy();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('Unknown message type:', type);\r\n\t\t}\r\n\t}\r\n\r\n\tsendMessage(type:string, payload: unknown) {\r\n\t\tconsole.log(`sending message ${type}`);\r\n\t\tif (this.socket?.readyState === WebSocket.OPEN) {\r\n\t\t\tthis.socket.send(JSON.stringify({ type, payload }));\r\n\t\t} else {\r\n\t\t\tconsole.warn('WebSocket is not connected');\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\nWhen a new enemy event is received, we'll add this new game object to this player's screen.\r\n\t*/\r\n\taddEnemyPlayers(enemyPlayer: Player) {\r\n\t\tconst [_name, key] = enemyPlayer.name.split(':');\r\n\t\tconsole.log('Adding enemy player! ', enemyPlayer.name, ' Against ', key);\r\n\t\tconst enemy = new Player(\r\n\t\t\tthis,\r\n\t\t\tenemyPlayer.x,\r\n\t\t\tenemyPlayer.y,\r\n\t\t\tenemyPlayer.name,\r\n\t\t);\r\n\t\tthis.enemies[enemy.key] = enemy;\r\n\t\tthis.enemyPlayers.add(enemy);\r\n\t\tthis.addColliders();\r\n\t}\r\n\r\n\t/*\r\nWhen we add our local player to the game, we must notify the server about it! We are setting a generic game here, but we could add a custom name from a website.\r\n\t*/\r\n\taddPlayer() {\r\n\t\tthis.thrust = this.add.layer();\r\n\t\tconst x = 600 + Phaser.Math.Between(-100, 100);\r\n\t\tconst y = 500 + Phaser.Math.Between(-100, 100);\r\n\t\tthis.player = new Player(this, x, y, 'MyName:' + crypto.randomUUID());\r\n\t\tconsole.log('Creating player! ', this.player.key);\r\n\t\tthis.sendMessage(NEW_PLAYER, this.player);\r\n\t\tthis.setCamera();\r\n\t}\r\n\r\n\tsetCamera() {\r\n\t\tthis.cameras.main.setBackgroundColor(0xcccccc);\r\n\t\tthis.cameras.main.startFollow(this.player, true, 0.05, 0.05, 0, 100);\r\n\t}\r\n\r\n\t/*\r\nThis is the only collider in this simplified game. If the player hits any other ship, both ships will be destroyed.\r\n\t*/\r\n\taddColliders() {\r\n\t\t// this.physics.add.collider(this.player, this.enemyPlayers);\r\n\t\tthis.physics.add.overlap(\r\n\t\t\tthis.player,\r\n\t\t\tthis.enemyPlayers,\r\n\t\t\tthis.playerCollision as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n\t\t\tundefined,\r\n\t\t\tthis\r\n\t\t);\r\n\t}\r\n\r\n\tplayerCollision(player: any, foe: any) {\r\n\t\tthis.sendMessage(PLAYER_DISCONNECTED, player.key);\r\n\t\tplayer.destroy();\r\n\t\tfoe.destroy();\r\n\t}\r\n\r\n\t/*\r\nIn the game loop, we check if the player position has changed. If it has, we notify the server about it, so other players can reproduce the movement.\r\n\t*/\r\n\toverride update() {\r\n\t\tif (this.player) {\r\n\t\t\tconst currPosition = {\r\n\t\t\t\tx: this.player.x,\r\n\t\t\t\ty: this.player.y,\r\n\t\t\t\trotation: this.player.rotation,\r\n\t\t\t};\r\n\t\t\tif (\r\n\t\t\t\tthis.player.oldPosition &&\r\n\t\t\t\t(currPosition.x !== this.player.oldPosition.x ||\r\n\t\t\t\t\tcurrPosition.y !== this.player.oldPosition.y ||\r\n\t\t\t\t\tcurrPosition.rotation !== this.player.oldPosition.rotation)\r\n\t\t\t) {\r\n\t\t\t\tthis.sendMessage(PLAYER_IS_MOVING, {\r\n\t\t\t\t\tkey: this.player.key,\r\n\t\t\t\t\t...currPosition,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.player.oldPosition = currPosition;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\nThe rest of the game is same as usual.\r\n\t*/\r\n\tloadAudios() {\r\n\t\tthis.audios = {\r\n\t\t\tpick: this.sound.add('pick'),\r\n\t\t\tshot: this.sound.add('shot'),\r\n\t\t\tfoeshot: this.sound.add('foeshot'),\r\n\t\t\texplosion: this.sound.add('explosion'),\r\n\t\t\tasteroid: this.sound.add('asteroid'),\r\n\t\t};\r\n\t}\r\n\r\n\tplayAudio(key: string) {\r\n\t\tthis.audios[key].play({ volume: 0.2 });\r\n\t}\r\n\r\n\tplayMusic(theme?: string) {\r\n\t\tconst selectedMusic = theme ?? `muzik${Phaser.Math.Between(0, 5)}`;\r\n\t\tthis.theme = this.sound.add(selectedMusic);\r\n\t\tthis.theme.stop();\r\n\t\tthis.theme.play({\r\n\t\t\tmute: false,\r\n\t\t\tvolume: 1,\r\n\t\t\trate: 1,\r\n\t\t\tdetune: 0,\r\n\t\t\tseek: 0,\r\n\t\t\tloop: true,\r\n\t\t\tdelay: 0,\r\n\t\t});\r\n\t}\r\n\r\n\tstartGame() {\r\n\t\tif (this.theme) this.theme.stop();\r\n\t\tthis.scene.start('game');\r\n\t}\r\n\r\n    \r\n\tdestroy() {\r\n\t\tconsole.log(\"destroying\");\r\n\t\tif (this.player) this.sendMessage(PLAYER_DISCONNECTED, this.player.key);\r\n\t\t// super.destroy();\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": ["Phaser", "Phaser"]
}
