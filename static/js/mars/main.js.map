{
  "version": 3,
  "sources": ["../../../games/mars/main.ts", "../../../games/mars/scenes/bootloader.ts", "../../../games/mars/gameobjects/utils.ts", "../../../games/mars/scenes/outro.ts", "../../../games/mars/gameobjects/particle.ts", "../../../games/mars/scenes/splash.ts", "../../../games/mars/scenes/transition.ts", "../../../games/mars/gameobjects/step.ts", "../../../games/mars/gameobjects/player.ts", "../../../games/mars/gameobjects/hole.ts", "../../../games/mars/gameobjects/braun.ts", "../../../games/mars/gameobjects/object.ts", "../../../games/mars/gameobjects/drone.ts", "../../../games/mars/scenes/game.ts"],
  "sourcesContent": ["import Phaser from 'https://esm.sh/phaser@4.0.0-rc.4';\r\nimport Bootloader from './scenes/bootloader.ts';\r\nimport Outro from './scenes/outro.ts';\r\nimport Splash from './scenes/splash.ts';\r\nimport Transition from './scenes/transition.ts';\r\nimport Game from './scenes/game.ts';\r\n\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n    width: 800,\r\n    height: 800,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n    },\r\n    autoRound: false,\r\n    parent: 'game-container',\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            gravity: {x: 0, y: 300},\r\n            debug: false\r\n        },\r\n    },\r\n    plugins: {},\r\n    scene: [Bootloader, Splash, Transition, Game, Outro]\r\n};\r\n\r\nconst game = new Phaser.Game(config);", "export default class Bootloader extends Phaser.Scene {\r\n    progressBar!: Phaser.GameObjects.Graphics;\r\n    loadBar!: Phaser.GameObjects.Graphics;\r\n\r\n  constructor() {\r\n    super({ key: \"bootloader\" });\r\n  }\r\n\r\n  /*\r\n    Once again we load all the assets in the preload method, organizing them in the usual order and starting from the progress bar.\r\n    */\r\n  preload() {\r\n    this.createBars();\r\n    this.setLoadEvents();\r\n    this.loadFonts();\r\n    this.loadImages();\r\n    this.loadMaps();\r\n    this.loadAudios();\r\n    this.loadSpritesheets();\r\n    this.setRegistry();\r\n  }\r\n\r\n  /*\r\n    This will be the method that will be in charge of updating the progress bar as the assets are loaded. The colors used in the bar are the same that we use in the game and the splash screen.\r\n    */\r\n  setLoadEvents() {\r\n    this.load.on(\r\n      \"progress\",\r\n      (value: number) => {\r\n        this.progressBar.clear();\r\n        this.progressBar.fillStyle(0xae2012, 1);\r\n        this.progressBar.fillRect(\r\n          this.cameras.main.width / 4,\r\n          this.cameras.main.height / 2 - 16,\r\n          (this.cameras.main.width / 2) * value,\r\n          16\r\n        );\r\n      },\r\n      this\r\n    );\r\n    this.load.on(\r\n      \"complete\",\r\n      () => {\r\n        this.scene.start(\"splash\");\r\n      },\r\n      this\r\n    );\r\n  }\r\n\r\n  /*\r\n    In this game, there's only one minimalistic, computer-like font, so we only need to load one bitmap font.\r\n    */\r\n  loadFonts() {\r\n    this.load.bitmapFont(\r\n      \"pico\",\r\n      \"assets/mars/fonts/pico.png\",\r\n      \"assets/mars/fonts/pico.xml\"\r\n    );\r\n  }\r\n\r\n  /*\r\n    These are the fixed images of the game. A couple of them are backgrounds used in the game transitions.\r\n    */\r\n  loadImages() {\r\n    this.load.image(\"body\", \"assets/mars/images/body.png\");\r\n    this.load.image(\"landscape\", \"assets/mars/images/landscape.png\");\r\n    this.load.image(\"record\", \"assets/mars/images/record.png\");\r\n    this.load.image(\"hole\", \"assets/mars/images/hole.png\");\r\n    this.load.image(\"pello\", \"assets/mars/images/pello_ok.png\");\r\n    this.load.image(\"mars\", \"assets/mars/maps/mars64.png\");\r\n    this.load.image(\"background\", \"assets/mars/maps/mars.png\");\r\n  }\r\n\r\n  /*\r\n    This game contains different tiled maps. As the game advances, the style will change slightly, with a more complex and darker style at the end.\r\n    */\r\n  loadMaps() {\r\n    Array(7)\r\n      .fill(0)\r\n      .forEach((_, i) => {\r\n        this.load.tilemapTiledJSON(`scene${i}`, `assets/mars/maps/scene${i}.json`);\r\n      });\r\n  }\r\n\r\n  /*\r\n    There are many audios in this game because we need to create a very immersive atmosphere and we require sound recordings for the diaries and the officer's messages.\r\n    */\r\n  loadAudios() {\r\n    this.load.audio(\"mars_background\", \"assets/mars/sounds/mars_background.mp3\");\r\n    this.load.audio(\"step\", \"assets/mars/sounds/step.mp3\");\r\n    this.load.audio(\"creepy\", \"assets/mars/sounds/creepy.mp3\");\r\n    this.load.audio(\"heartbeat\", \"assets/mars/sounds/heartbeat.mp3\");\r\n    this.load.audio(\"breath\", \"assets/mars/sounds/breath.mp3\");\r\n    this.load.audio(\"blip\", \"assets/mars/sounds/blip.mp3\");\r\n    this.load.audio(\"ohmygod\", \"assets/mars/sounds/ohmygod.mp3\");\r\n    this.load.audio(\"kill\", \"assets/mars/sounds/kill.mp3\");\r\n    this.load.audio(\"tracker\", \"assets/mars/sounds/tracker.mp3\");\r\n    this.load.audio(\"holeshout\", \"assets/mars/sounds/holeshout.mp3\");\r\n    this.load.audio(\"oxygen\", \"assets/mars/sounds/oxygen.mp3\");\r\n    this.load.audio(\"monster\", \"assets/mars/sounds/monster.mp3\");\r\n    this.load.audio(\"killed\", \"assets/mars/sounds/killed.mp3\");\r\n    this.load.audio(\"creepy_static\", \"assets/mars/sounds/creepy_static.mp3\");\r\n    this.load.audio(\"shock\", \"assets/mars/sounds/shock.mp3\");\r\n    this.load.audio(\"cave\", \"assets/mars/sounds/cave.mp3\");\r\n    this.load.audio(\"type\", \"assets/mars/sounds/type.mp3\");\r\n\r\n    Array(4)\r\n      .fill(0)\r\n      .forEach((_, i) => {\r\n        this.load.audio(`static${i}`, `assets/mars/sounds/static${i}.mp3`);\r\n      });\r\n\r\n    Array(6)\r\n      .fill(0)\r\n      .forEach((_, i) => {\r\n        this.load.audio(\r\n          `diary${i + 1}`,\r\n          `assets/mars/sounds/diary/diary${i + 1}.mp3`\r\n        );\r\n      });\r\n\r\n    Array(6)\r\n      .fill(0)\r\n      .forEach((_, i) => {\r\n        this.load.audio(\r\n          `officer${i + 1}`,\r\n          `assets/mars/sounds/officer/officer${i + 1}.mp3`\r\n        );\r\n      });\r\n  }\r\n\r\n  /*\r\n    These are the sprites, not many because of the style of the game. Uh-oh, there's a monster!\r\n    */\r\n  loadSpritesheets() {\r\n    this.load.spritesheet(\"player\", \"assets/mars/images/player.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n    this.load.spritesheet(\"debris\", \"assets/mars/images/debris.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n    this.load.spritesheet(\"step\", \"assets/mars/images/step.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n    this.load.spritesheet(\"wave\", \"assets/mars/images/wave.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n    this.load.spritesheet(\"drone\", \"assets/mars/images/drone.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n    this.load.spritesheet(\"monster\", \"assets/mars/images/monster.png\", {\r\n      frameWidth: 128,\r\n      frameHeight: 64,\r\n    });\r\n  }\r\n\r\n  /*\r\n    This method will set the initial value of the game's registry. The score will be set to 0. We could use it to measure completion time or the steps required.\r\n    */\r\n  setRegistry() {\r\n    this.registry.set(\"score\", 0);\r\n  }\r\n\r\n  /*\r\n    This is the background of the progress bar. It's a simple rectangle with a border and it also uses one of the game's colors.\r\n    */\r\n  createBars() {\r\n    this.loadBar = this.add.graphics();\r\n    this.loadBar.fillStyle(0x6b140b, 1);\r\n    this.loadBar.fillRect(\r\n      this.cameras.main.width / 4 - 2,\r\n      this.cameras.main.height / 2 - 18,\r\n      this.cameras.main.width / 2 + 4,\r\n      20\r\n    );\r\n    this.progressBar = this.add.graphics();\r\n  }\r\n}", "export default class Utils {\r\n    scene: Phaser.Scene;\r\n    typeAudio?: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n\r\n\tconstructor(scene: Phaser.Scene) {\r\n\t\tthis.scene = scene;\r\n\t}\r\n\r\n\t/*\r\nThis is the typeText method. It will create a bitmap text for each character in the string, and will animate them in a timeline. The text will be typed in the screen, with a typewriter effect.\r\n  */\r\n\ttypeText(text: string, font: string, x: number, y = 150, tint = 0x06e18a, size = 40) {\r\n\t\tconst characters: Array<Phaser.GameObjects.BitmapText | Phaser.GameObjects.Rectangle> = [];\r\n\t\tlet jump = 0;\r\n\t\tlet line = 0;\r\n\t\tlet last = 0;\r\n\t\ttext.split('').forEach((character, i) => {\r\n\t\t\tif (character === '\\n') {\r\n\t\t\t\tjump += 2;\r\n\t\t\t\tline = 0;\r\n\t\t\t}\r\n\t\t\tlast = i;\r\n\t\t\tcharacters.push(\r\n\t\t\t\tthis.scene.add\r\n\t\t\t\t\t.bitmapText(\r\n\t\t\t\t\t\tx - 350 + line++ * 25,\r\n\t\t\t\t\t\ty + jump * size,\r\n\t\t\t\t\t\tfont,\r\n\t\t\t\t\t\tcharacter,\r\n\t\t\t\t\t\tsize,\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.setTint(tint)\r\n\t\t\t\t\t.setAlpha(0),\r\n\t\t\t);\r\n\t\t});\r\n\t\tconst ending = this.scene.add\r\n\t\t\t.rectangle(x - 335 + line * 25, y + 25 + jump * size, 25, 5, tint)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setAlpha(0);\r\n\t\tconst timeline = this.scene.add.timeline({});\r\n\t\tthis.typeAudio = this.scene.sound.add('type');\r\n\r\n\t\tcharacters.forEach((character, i) => {\r\n\t\t\ttimeline.add({\r\n\t\t\t\tat: 0,\r\n\t\t\t\ttween: {\r\n\t\t\t\t\ttargets: character,\r\n\t\t\t\t\talpha: { from: 0, to: 0.5 },\r\n\t\t\t\t\tduration: 100,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\ttimeline.add({\r\n\t\t\tat: 100,\r\n\t\t\ttween: {\r\n\t\t\t\ttargets: ending,\r\n\t\t\t\talpha: { from: 0, to: 0.8 },\r\n\t\t\t\tduration: 100,\r\n\t\t\t\trepeat: 5,\r\n\t\t\t\tyoyo: true,\r\n\t\t\t\tonStart: () => {\r\n\t\t\t\t\tthis.typeAudio?.stop();\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tthis.typeAudio.play({\r\n\t\t\tmute: false,\r\n\t\t\tvolume: 1,\r\n\t\t\trate: 1,\r\n\t\t\tdetune: 0,\r\n\t\t\tseek: 0,\r\n\t\t\tloop: true,\r\n\t\t\tdelay: 0,\r\n\t\t});\r\n\t\ttimeline.play();\r\n\t\tcharacters.push(ending);\r\n\t\treturn characters;\r\n\t}\r\n\r\n\t/*\r\nThis removes the typed text from the screen.\r\n  */\r\n\tremoveTyped(texts: any) {\r\n\t\ttexts.flat().forEach((char:any) => char.destroy());\r\n\t}\r\n}\r\n", "import Utils from '../gameobjects/utils.ts';\r\n\r\nexport default class Outro extends Phaser.Scene {\r\n    width!: number;\r\n    height!: number;\r\n    center_width!: number;\r\n    center_height!: number;\r\n    introLayer!: Phaser.GameObjects.Layer;\r\n    splashLayer!: Phaser.GameObjects.Layer;\r\n    utils!: Utils;\r\n    title!: Phaser.GameObjects.BitmapText;\r\n    theme!: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n\r\n\tconstructor() {\r\n\t\tsuper({ key: 'outro' });\r\n\t}\r\n\r\n\t/*\r\nThe outro is similar to the Splash screen, but it has a different background and a different title. It also has a different music theme.\r\n  */\r\n\tcreate() {\r\n\t\tthis.width = +this.sys.game.config.width;\r\n\t\tthis.height = +this.sys.game.config.height;\r\n\t\tthis.center_width = this.width / 2;\r\n\t\tthis.center_height = this.height / 2;\r\n\t\tthis.introLayer = this.add.layer();\r\n\t\tthis.splashLayer = this.add.layer();\r\n\r\n\t\tthis.add.tileSprite(0, 0, 800, 600, 'landscape').setOrigin(0);\r\n\t\tthis.utils = new Utils(this);\r\n\t\tthis.title = this.add\r\n\t\t\t.bitmapText(\r\n\t\t\t\tthis.center_width,\r\n\t\t\t\tthis.center_height + 100,\r\n\t\t\t\t'pico',\r\n\t\t\t\t'MARSTRANDED',\r\n\t\t\t\t60,\r\n\t\t\t)\r\n\t\t\t.setTint(0x6b140b)\r\n\t\t\t.setAlpha(0)\r\n\t\t\t.setDropShadow(0, 4, 0x6b302a, 0.9)\r\n\t\t\t.setOrigin(0.5);\r\n\t\tthis.tweens.add({\r\n\t\t\ttargets: this.title,\r\n\t\t\talpha: { from: 0, to: 1 },\r\n\t\t\tduration: 4000,\r\n\t\t});\r\n\r\n\t\tthis.input.keyboard?.on('keydown-SPACE', this.startSplash, this);\r\n\t\tthis.input.keyboard?.on('keydown-ENTER', this.startSplash, this);\r\n\t}\r\n\r\n\t/*\r\nWe set again the background sound.\r\n  */\r\n\tplayMusic(theme = 'mars_background') {\r\n\t\tthis.theme = this.sound.add(theme);\r\n\t\tthis.theme.stop();\r\n\t\tthis.theme.play({\r\n\t\t\tmute: false,\r\n\t\t\tvolume: 1.5,\r\n\t\t\trate: 1,\r\n\t\t\tdetune: 0,\r\n\t\t\tseek: 0,\r\n\t\t\tloop: true,\r\n\t\t\tdelay: 0,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\nThis function will start the Splash screen.\r\n  */\r\n\tstartSplash() {\r\n\t\tthis.sound.stopAll();\r\n\t\tthis.scene.start('splash');\r\n\t}\r\n}\r\n", "export class ShotSmoke extends Phaser.GameObjects.Rectangle {\r\n    declare body: Phaser.Physics.Arcade.Body;\r\n    \r\n\tconstructor(scene: Phaser.Scene, x: number, y: number, directionX: number, directionY: number, color = 0xffeaab) {\r\n\t\tx += Phaser.Math.Between(-30, 30);\r\n\t\ty += Phaser.Math.Between(-30, 30);\r\n\t\tconst width = Phaser.Math.Between(30, 55);\r\n\t\tconst height = Phaser.Math.Between(30, 55);\r\n\t\tsuper(scene, x, y, width, height, color);\r\n\t\tscene.add.existing(this);\r\n\t\tscene.physics.add.existing(this);\r\n\t\tthis.body.setAllowGravity(false);\r\n\t\tthis.body.setVelocityX(100 * directionX);\r\n\t\tthis.body.setVelocityY(100 * directionY);\r\n\t\tthis.init();\r\n\t}\r\n\r\n\tinit() {\r\n\t\tthis.scene.tweens.add({\r\n\t\t\ttargets: this,\r\n\t\t\tduration: 800,\r\n\t\t\tscale: { from: 1, to: 0 },\r\n\t\t\tonComplete: () => {\r\n\t\t\t\tthis.destroy();\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n}\r\n", "import { ShotSmoke } from '../gameobjects/particle.ts';\r\n\r\nexport default class Splash extends Phaser.Scene {\r\n    width!: number;\r\n    height!: number;\r\n    center_width!: number;\r\n    center_height!: number;\r\n    smokeLayer!: Phaser.GameObjects.Layer;\r\n    step!: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n    theme!: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n    space!: Phaser.GameObjects.BitmapText;\r\n\r\n\tconstructor() {\r\n\t\tsuper({ key: 'splash' });\r\n\t}\r\n\r\n\t/*\r\n    This creates the elements of the Splash screen.\r\n  */\r\n\tcreate() {\r\n\t\tthis.width = +this.sys.game.config.width;\r\n\t\tthis.height = +this.sys.game.config.height;\r\n\t\tthis.center_width = this.width / 2;\r\n\t\tthis.center_height = this.height / 2;\r\n\t\tthis.cameras.main.setBackgroundColor(0x000000);\r\n\t\tthis.smokeLayer = this.add.layer();\r\n\t\tthis.showTitle();\r\n\t\tthis.time.delayedCall(1000, () => this.showInstructions(), undefined, this);\r\n\r\n\t\tthis.input.keyboard?.on('keydown-SPACE', () => this.startGame(), this);\r\n\t\tthis.playMusic();\r\n\t}\r\n\r\n\t/*\r\n  The title of the game is created with a delay between each letter, and the smoke effect is created simulating footsteps on the red planet.\r\n  */\r\n\tshowTitle() {\r\n\t\tthis.step = this.sound.add('step');\r\n\t\t'MARSTRANDED'.split('').forEach((letter, i) => {\r\n\t\t\tthis.time.delayedCall(\r\n\t\t\t\t600 * (i + 1),\r\n\t\t\t\t() => {\r\n\t\t\t\t\tlet text = this.add\r\n\t\t\t\t\t\t.bitmapText(70 * i + 50, 200, 'pico', letter, 70)\r\n\t\t\t\t\t\t.setTint(0x6b140b)\r\n\t\t\t\t\t\t.setOrigin(0.5)\r\n\t\t\t\t\t\t.setDropShadow(0, 4, 0x6b302a, 0.9);\r\n\t\t\t\t\tArray(Phaser.Math.Between(2, 4))\r\n\t\t\t\t\t\t.fill(0)\r\n\t\t\t\t\t\t.forEach((j) => {\r\n\t\t\t\t\t\t\tthis.smokeLayer.add(\r\n\t\t\t\t\t\t\t\tnew ShotSmoke(\r\n\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t70 * i + 80 + Phaser.Math.Between(-30, 30),\r\n\t\t\t\t\t\t\t\t\t200 + Phaser.Math.Between(-30, 30),\r\n\t\t\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t\t\t-1,\r\n\t\t\t\t\t\t\t\t\t0x6b302a,\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tthis.step.play({ rate: 0.8 });\r\n\t\t\t\t\tthis.step.resume();\r\n\t\t\t\t},\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis,\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n  This method is called when the player presses the space bar to start the game. It stops the music and starts the transition to the game.\r\n  */\r\n\tstartGame() {\r\n\t\tif (this.theme) this.theme.stop();\r\n\t\tthis.sound.add('blip').play();\r\n\t\tthis.scene.start('transition', {\r\n\t\t\tnext: 'game',\r\n\t\t\tname: 'STAGE',\r\n\t\t\tnumber: 0,\r\n\t\t\ttime: 30,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n  We add some background sound instead of music, but it's a sound file looped after all.\r\n  */\r\n\tplayMusic(theme = 'mars_background') {\r\n\t\tthis.theme = this.sound.add(theme);\r\n\t\tthis.theme.stop();\r\n\t\tthis.theme.play({\r\n\t\t\tmute: false,\r\n\t\t\tvolume: 2,\r\n\t\t\trate: 1,\r\n\t\t\tdetune: 0,\r\n\t\t\tseek: 0,\r\n\t\t\tloop: true,\r\n\t\t\tdelay: 0,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n  Below the title, we show the instructions to start the game and the author's name.\r\n  */\r\n\tshowInstructions() {\r\n\t\tthis.add\r\n\t\t\t.bitmapText(this.center_width, 450, 'pico', 'WASD/Arrows', 40)\r\n\t\t\t.setTint(0x6b140b)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setDropShadow(0, 3, 0x6b302a, 0.9);\r\n\t\tthis.add\r\n\t\t\t.sprite(this.center_width - 140, 355, 'pello')\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setScale(0.5);\r\n\t\tthis.add\r\n\t\t\t.bitmapText(this.center_width + 60, 350, 'pico', 'By PELLO', 35)\r\n\t\t\t.setTint(0x6b140b)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setDropShadow(0, 3, 0x6b302a, 0.9);\r\n\t\tthis.space = this.add\r\n\t\t\t.bitmapText(this.center_width, 520, 'pico', 'SPACE start', 30)\r\n\t\t\t.setTint(0x6b140b)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setDropShadow(0, 2, 0x6b302a, 0.9);\r\n\t\tthis.tweens.add({\r\n\t\t\ttargets: this.space,\r\n\t\t\tduration: 300,\r\n\t\t\talpha: { from: 0, to: 1 },\r\n\t\t\trepeat: -1,\r\n\t\t\tyoyo: true,\r\n\t\t});\r\n\t}\r\n}\r\n", "import Utils from '../gameobjects/utils.ts';\r\n\r\nexport default class Transition extends Phaser.Scene {\r\n\tnumber!: number;\r\n\tmissions!: string[];\r\n\tutils!: Utils;\r\n\twidth!: number;\r\n\theight!: number;\r\n\tcenter_width!: number;\r\n\tcenter_height!: number;\r\n\ttext1!: Phaser.GameObjects.BitmapText;\r\n\ttext2!: Phaser.GameObjects.BitmapText;\r\n\ttext3!: Phaser.GameObjects.BitmapText;\r\n    play!: Phaser.GameObjects.BitmapText;\r\n\ttheme!:\r\n\t\t| Phaser.Sound.NoAudioSound\r\n\t\t| Phaser.Sound.HTML5AudioSound\r\n\t\t| Phaser.Sound.WebAudioSound;\r\n    recording!:\r\n\t\t| Phaser.Sound.NoAudioSound\r\n\t\t| Phaser.Sound.HTML5AudioSound\r\n\t\t| Phaser.Sound.WebAudioSound;\r\n    creepy!:\r\n\t\t| Phaser.Sound.NoAudioSound\r\n\t\t| Phaser.Sound.HTML5AudioSound\r\n\t\t| Phaser.Sound.WebAudioSound;\r\n\twave!: Phaser.GameObjects.Sprite;\r\n\r\n\tconstructor() {\r\n\t\tsuper({ key: 'transition' });\r\n\t}\r\n\r\n\tinit(data: { number: number }) {\r\n\t\tthis.number = data.number;\r\n\t}\r\n\r\n\t/*\r\n    We create the elements of the transitions. We have to add the sound of the diary, the creepy sound, and the mission objective.\r\n  */\r\n\tcreate() {\r\n\t\tthis.missions = [\r\n\t\t\t'',\r\n\t\t\t'Go north, locate containers.',\r\n\t\t\t'Find landing zone. North East.',\r\n\t\t\t'Locate landing, South East.',\r\n\t\t\t'Go East, locate containers.',\r\n\t\t\t'Other landings: North East',\r\n\t\t\t'Find out ship origin...',\r\n\t\t];\r\n\r\n\t\tthis.utils = new Utils(this);\r\n\t\tthis.width = +this.sys.game.config.width;\r\n\t\tthis.height = +this.sys.game.config.height;\r\n\t\tthis.center_width = this.width / 2;\r\n\t\tthis.center_height = this.height / 2;\r\n\t\tthis.add.tileSprite(0, 0, 800, 600, 'landscape').setOrigin(0);\r\n\r\n\t\tif (this.number === 7) {\r\n\t\t\tthis.scene.start('outro', { number: this.number });\r\n\t\t} else {\r\n\t\t\tthis.sound.stopAll();\r\n\t\t}\r\n\r\n\t\tthis.showInstructions();\r\n\r\n\t\tthis.input.keyboard?.on('keydown-ENTER', () => this.loadNext(), this);\r\n\t\tthis.input.keyboard?.on('keydown-SPACE', () => this.loadNext(), this);\r\n\t}\r\n\r\n\t/*\r\n    This is the method that will show the instructions for the next scene. It will show the day, the audio record of the captain, and the mission objective.\r\n  */\r\n\tshowInstructions() {\r\n\t\tconst listOfDays = Array(8)\r\n\t\t\t.fill(0)\r\n\t\t\t.map((_, i) => `DAY ${i}`);\r\n\t\tthis.text1 = this.add\r\n\t\t\t.bitmapText(this.center_width, 20, 'pico', listOfDays[this.number], 30)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setAlpha(0);\r\n\t\tthis.text2 = this.add\r\n\t\t\t.bitmapText(\r\n\t\t\t\tthis.center_width,\r\n\t\t\t\t70,\r\n\t\t\t\t'pico',\r\n\t\t\t\t'AUDIO RECORD OF CAPTAIN BRAUN',\r\n\t\t\t\t20,\r\n\t\t\t)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setAlpha(0);\r\n\r\n\t\tif (this.number > 0) {\r\n\t\t\tthis.showSceneInstructions();\r\n\t\t} else {\r\n\t\t\tthis.showFirstInstructions();\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n    The next methods are used to show the instructions for the next scene. In the case of the first screen, it adds some extra effects.\r\n  */\r\n\tshowSceneInstructions() {\r\n\t\tthis.tweens.add({\r\n\t\t\ttargets: [this.text1, this.text2, this.play],\r\n\t\t\tduration: 1000,\r\n\t\t\talpha: { from: 0, to: 1 },\r\n\t\t\tonComplete: () => {\r\n\t\t\t\tthis.playDiary();\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tshowFirstInstructions() {\r\n\t\tthis.playBackground();\r\n\t\tthis.text2 = this.add\r\n\t\t\t.bitmapText(this.center_width, 70, 'pico', 'THE CRASH', 20)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setAlpha(0);\r\n\t\tthis.playCreepy();\r\n\t\tthis.tweens.add({\r\n\t\t\ttargets: [this.text1],\r\n\t\t\tduration: 2000,\r\n\t\t\talpha: { from: 0, to: 1 },\r\n\t\t\tonComplete: () => {\r\n\t\t\t\tthis.playIntro();\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n    This is the function that will show the intro of the game. It's a text that will be typed on the screen.\r\n  */\r\n\tplayIntro() {\r\n\t\tconst text = 'YOU JUST CRASHED ON MARS\\n' +\r\n\t\t\t'YOU ARE ALIVE BUT YOUR\\n' +\r\n\t\t\t'SHIP IS COMPLETELY LOST\\n' +\r\n\t\t\t'IF YOU WANT TO LIVE YOU\\n' +\r\n\t\t\t'MUST FIND LANDING REMAINS\\n' +\r\n\t\t\t'TRY GOING EAST...';\r\n\r\n\t\tthis.utils.typeText(text, 'pico', this.center_width, 150, 0xffffff, 20);\r\n\t}\r\n\r\n\t/*\r\n    This is the background sound of the transition. It's a looped sound.\r\n  */\r\n\tplayBackground() {\r\n\t\tconst theme = 'mars_background';\r\n\t\tthis.theme = this.sound.add(theme);\r\n\t\tthis.theme.stop();\r\n\t\tthis.theme.play({\r\n\t\t\tmute: false,\r\n\t\t\tvolume: 1,\r\n\t\t\trate: 1,\r\n\t\t\tdetune: 0,\r\n\t\t\tseek: 0,\r\n\t\t\tloop: true,\r\n\t\t\tdelay: 0,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n    This is the audio record of the captain. It will be played along with an animation of a sound wave (not tied to the sound itself, but to the time of the animation).\r\n  */\r\n\tplayDiary() {\r\n\t\tthis.wave = this.add.sprite(this.center_width, 200, 'wave').setOrigin(0.5);\r\n\t\tthis.anims.create({\r\n\t\t\tkey: 'wave',\r\n\t\t\tframes: this.anims.generateFrameNumbers('wave', { start: 0, end: 4 }),\r\n\t\t\tframeRate: 20,\r\n\t\t\trepeat: -1,\r\n\t\t});\r\n\t\tthis.wave.anims.play('wave', true);\r\n\t\tthis.recording = this.sound.add(`diary${this.number}`);\r\n\t\tthis.recording.on(\r\n\t\t\t'complete',\r\n\t\t\t() => {\r\n\t\t\t\tthis.wave.destroy();\r\n\t\t\t\tthis.showMission();\r\n\t\t\t\tthis.playCreepy();\r\n\t\t\t},\r\n\t\t);\r\n\t\tthis.recording.play();\r\n\t}\r\n\r\n\t/*\r\n      This will be used to play a specific creepy sound at the end. Probably we could reuse the `playBackground` method.\r\n  */\r\n\tplayCreepy() {\r\n\t\tthis.creepy = this.sound.add('creepy');\r\n\t\tthis.creepy.play({\r\n\t\t\tmute: false,\r\n\t\t\tvolume: 0.9,\r\n\t\t\trate: 0.9,\r\n\t\t\tdetune: 0,\r\n\t\t\tseek: 0,\r\n\t\t\tloop: true,\r\n\t\t\tdelay: 0,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n    This is the mission objective. It will be shown on the screen.\r\n  */\r\n\tshowMission() {\r\n\t\tthis.text3 = this.add\r\n\t\t\t.bitmapText(this.center_width, 300, 'pico', 'MISSION OBJECTIVE:', 30)\r\n\t\t\t.setOrigin(0.5);\r\n\t\tthis.utils.typeText(\r\n\t\t\tthis.missions[this.number],\r\n\t\t\t'pico',\r\n\t\t\tthis.center_width,\r\n\t\t\t400,\r\n\t\t\t0xffffff,\r\n\t\t\t20,\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n    When the transition information finishes or the user presses the space bar, we will start the next scene.\r\n  */\r\n\tloadNext() {\r\n\t\tthis.sound.add('blip').play();\r\n\t\tthis.sound.stopAll();\r\n\t\tthis.scene.start('game', { number: this.number });\r\n\t}\r\n}\r\n", "export default class Step extends Phaser.GameObjects.Sprite {\r\n\tconstructor(scene: Phaser.Scene, x: number, y: number, name = 'step') {\r\n\t\tsuper(scene, x, y, 'step', Phaser.Math.Between(0, 3));\r\n\t\tscene.add.existing(this);\r\n\t\tthis.setOrigin(0);\r\n\t\tscene.tweens.add({\r\n\t\t\ttargets: [this],\r\n\t\t\tduration: 2000,\r\n\t\t\talpha: { from: 1, to: 0.1 },\r\n\t\t});\r\n\t}\r\n}\r\n", "import Game from '../scenes/game.ts';\r\nimport Step from './step.ts';\r\n\r\nexport default class Player extends Phaser.GameObjects.Sprite {\r\n    declare scene: Game;\r\n    declare body: Phaser.Physics.Arcade.Body;\r\n    dead: boolean;\r\n    shells: number;\r\n    lastDirection: number;\r\n    steps: number;\r\n    stepDelta: number;\r\n    moveDelta: number;\r\n    rate: number;\r\n    previousRate: number;\r\n    oxygen: number;\r\n    locked: boolean;\r\n    cursor!: Phaser.Types.Input.Keyboard.CursorKeys\r\n    W!: Phaser.Input.Keyboard.Key;\r\n    A!: Phaser.Input.Keyboard.Key;\r\n    S!: Phaser.Input.Keyboard.Key;\r\n    D!: Phaser.Input.Keyboard.Key;\r\n\r\n\tconstructor(scene: Phaser.Scene, x: number, y: number, oxygen = 100) {\r\n\t\tsuper(scene, x, y, 'player');\r\n\t\tthis.setOrigin(0);\r\n\t\tthis.setScale(1);\r\n\t\tthis.scene.add.existing(this);\r\n\t\tthis.scene.physics.add.existing(this);\r\n\t\tthis.body.setAllowGravity(false);\r\n\t\tthis.dead = false;\r\n\t\tthis.init();\r\n\t\tthis.shells = 0;\r\n\t\tthis.lastDirection = 0;\r\n\t\tthis.steps = 0;\r\n\t\tthis.stepDelta = 0;\r\n\t\tthis.moveDelta = 0;\r\n\t\tthis.rate = 0.2;\r\n\t\tthis.previousRate = 0.2;\r\n\t\tthis.oxygen = oxygen;\r\n\t\tthis.locked = false;\r\n\t}\r\n\r\n\t/*\r\n    Here we add the controls to the player and the events to update the player's position and breath.\r\n  */\r\n\tinit() {\r\n\t\tthis.addControls();\r\n\t\tthis.scene.events.on('update', this.update, this);\r\n\t}\r\n\r\n\taddControls() {\r\n\t\tthis.cursor = this.scene.input.keyboard?.createCursorKeys() ?? (()=>{throw(\"Failed to get keyboard input\")})();\r\n\t\tthis.W = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\r\n\t\tthis.A = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\r\n\t\tthis.S = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\r\n\t\tthis.D = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\r\n\t}\r\n\r\n\t/*\r\n    In the update function, we check the player's input and update the player's position and breath as always. But in this particular game, we move the player with a tween, so we have to check if the player is locked to avoid multiple movements at the same time.\r\n  */\r\n    \r\n\r\n\toverride update(_time: any, delta: any) {\r\n\t\tif (this.dead) return;\r\n\t\tif (this.locked) return;\r\n\t\tthis.stepDelta += delta;\r\n\t\tthis.moveDelta += delta;\r\n\r\n\t\tif (\r\n\t\t\t(Phaser.Input.Keyboard.JustDown(this.W) ||\r\n\t\t\t\tPhaser.Input.Keyboard.JustDown(this.cursor.up)) &&\r\n\t\t\tthis.canMoveUp()\r\n\t\t) {\r\n\t\t\tthis.moveDelta = 0;\r\n\t\t\tconst { x, y } = this;\r\n\t\t\tthis.locked = true;\r\n\t\t\tthis.scene.tweens.add({\r\n\t\t\t\ttargets: this,\r\n\t\t\t\ty: '-=64',\r\n\t\t\t\tduration: 200,\r\n\t\t\t\tonComplete: () => {\r\n\t\t\t\t\tthis.locked = false;\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tthis.step(x, y);\r\n\t\t} else if (\r\n\t\t\t(Phaser.Input.Keyboard.JustDown(this.D) ||\r\n\t\t\t\tPhaser.Input.Keyboard.JustDown(this.cursor.right)) &&\r\n\t\t\tthis.canMoveRight()\r\n\t\t) {\r\n\t\t\tthis.moveDelta = 0;\r\n\t\t\tconst { x, y } = this;\r\n\t\t\tthis.locked = true;\r\n\t\t\tthis.scene.tweens.add({\r\n\t\t\t\ttargets: this,\r\n\t\t\t\tx: '+=64',\r\n\t\t\t\tduration: 200,\r\n\t\t\t\tonComplete: () => {\r\n\t\t\t\t\tthis.locked = false;\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tthis.step(x, y);\r\n\t\t} else if (\r\n\t\t\t(Phaser.Input.Keyboard.JustDown(this.A) ||\r\n\t\t\t\tPhaser.Input.Keyboard.JustDown(this.cursor.left)) &&\r\n\t\t\tthis.canMoveLeft()\r\n\t\t) {\r\n\t\t\tthis.moveDelta = 0;\r\n\t\t\tconst { x, y } = this;\r\n\t\t\tthis.locked = true;\r\n\t\t\tthis.scene.tweens.add({\r\n\t\t\t\ttargets: this,\r\n\t\t\t\tx: '-=64',\r\n\t\t\t\tduration: 200,\r\n\t\t\t\tonComplete: () => {\r\n\t\t\t\t\tthis.locked = false;\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tthis.step(x, y);\r\n\t\t} else if (\r\n\t\t\t(Phaser.Input.Keyboard.JustDown(this.S) ||\r\n\t\t\t\tPhaser.Input.Keyboard.JustDown(this.cursor.down)) &&\r\n\t\t\tthis.canMoveDown()\r\n\t\t) {\r\n\t\t\tthis.moveDelta = 0;\r\n\t\t\tconst { x, y } = this;\r\n\t\t\tthis.locked = true;\r\n\t\t\tthis.scene.tweens.add({\r\n\t\t\t\ttargets: this,\r\n\t\t\t\ty: '+=64',\r\n\t\t\t\tduration: 200,\r\n\t\t\t\tonComplete: () => {\r\n\t\t\t\t\tthis.locked = false;\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tthis.step(x, y);\r\n\t\t}\r\n\r\n\t\tthis.adaptBreath();\r\n\t}\r\n\r\n\t/*\r\nThe next functions, lets us know if the player can move in a certain direction. We check if the tile in front of the player is empty and if the player has waited enough time to move again.\r\n  */\r\n\tcanMoveUp() {\r\n\t\treturn (\r\n\t\t\t!this.scene.platform.getTileAtWorldXY(this.x, this.y - 1) &&\r\n\t\t\tthis.moveDelta > 200\r\n\t\t);\r\n\t}\r\n\r\n\tcanMoveRight() {\r\n\t\treturn (\r\n\t\t\t!this.scene.platform.getTileAtWorldXY(this.x + 64, this.y) &&\r\n\t\t\tthis.moveDelta > 200\r\n\t\t);\r\n\t}\r\n\r\n\tcanMoveDown() {\r\n\t\treturn (\r\n\t\t\t!this.scene.platform.getTileAtWorldXY(this.x, this.y + 64) &&\r\n\t\t\tthis.moveDelta > 200\r\n\t\t);\r\n\t}\r\n\r\n\tcanMoveLeft() {\r\n\t\treturn (\r\n\t\t\t!this.scene.platform.getTileAtWorldXY(this.x - 1, this.y) &&\r\n\t\t\tthis.moveDelta > 200\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n    This function adds a step to the player and creates a new step sprite in the scene. It also plays a random sound to simulate the player's steps.\r\n  */\r\n\tstep(x: number, y: number) {\r\n\t\tthis.steps++;\r\n\t\tthis.scene.smokeLayer.add(new Step(this.scene, x, y));\r\n\t\tthis.scene.playRandom('step', 1);\r\n\t}\r\n\r\n\t/*\r\n    This is another important function to add some tension. It adapts the breath of the player depending on the steps he has taken. Depending on the step rate, the player will breath faster or slower. If the player has not taken any steps, the player will breath normally. The player will also consume oxygen depending on the steps he has taken.\r\n  */\r\n\tadaptBreath() {\r\n\t\tif (this.stepDelta > 2000) {\r\n\t\t\tif (this.steps > 2) {\r\n\t\t\t\tthis.previousRate = this.rate;\r\n\t\t\t\tthis.rate = this.steps < 11 ? this.steps / 10 : 1;\r\n\t\t\t\tthis.scene.breath(this.rate);\r\n\t\t\t\tthis.updateOxygen(this.steps + Math.round(this.steps / 2));\r\n\t\t\t} else if (this.rate !== this.previousRate) {\r\n\t\t\t\tthis.previousRate = this.rate;\r\n\t\t\t\tthis.rate = this.rate > 0.2 ? this.rate - 0.1 : 0.2;\r\n\t\t\t\tthis.scene.breath(this.rate);\r\n\t\t\t\tthis.updateOxygen(this.steps);\r\n\t\t\t} else {\r\n\t\t\t\tthis.updateOxygen(this.steps);\r\n\t\t\t}\r\n\t\t\tthis.steps = this.stepDelta = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n    As the player moves, he will consume oxygen. If the player runs out of oxygen, he will die.\r\n  */\r\n\tupdateOxygen(waste: number) {\r\n\t\tif (waste >= this.oxygen) {\r\n\t\t\tthis.oxygen = 0;\r\n\t\t\tthis.death();\r\n\t\t} else {\r\n\t\t\tthis.oxygen -= waste;\r\n\t\t}\r\n\t\tthis.scene.updateOxygen();\r\n\t}\r\n\r\n\t/*\r\n    This function will be called when the player dies. It will stop the player's body and restart the scene.\r\n  */\r\n\tdeath() {\r\n\t\tthis.dead = true;\r\n\t\tthis.body.stop();\r\n\t\tthis.body.enable = false;\r\n\t\tthis.scene.restartScene();\r\n\t}\r\n}\r\n", "export default class Hole extends Phaser.GameObjects.Sprite {\r\n\tdeclare body: Phaser.Physics.Arcade.Body;\r\n\r\n\tconstructor(scene: Phaser.Scene, x: number, y: number) {\r\n\t\tsuper(scene, x, y, 'hole');\r\n\t\tthis.name = 'hole';\r\n\t\tthis.setOrigin(0);\r\n\t\tthis.setAlpha(0);\r\n\t\tscene.add.existing(this);\r\n\t\tscene.physics.add.existing(this);\r\n\t\tthis.body.setAllowGravity(false);\r\n\t}\r\n}\r\n", "export default class Braun extends Phaser.GameObjects.Sprite {\r\n\tconstructor(scene: Phaser.Scene, x: number, y: number) {\r\n\t\tsuper(scene, x, y, 'body');\r\n\t\tthis.name = 'body';\r\n\t\tthis.setOrigin(0);\r\n\t\tthis.rotation = 1.6;\r\n\t\tscene.add.existing(this);\r\n\t}\r\n}\r\n", "import Hole from './hole.ts';\r\nimport Braun from './braun.ts';\r\nimport Game from '../scenes/game.ts';\r\n\r\nexport default class Object extends Phaser.GameObjects.Rectangle {\r\n    declare scene: Game;\r\n    declare body: Phaser.Physics.Arcade.Body;\r\n    description: string;\r\n    extra: string;\r\n    activated: boolean;\r\n    officerAudio!: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n\r\n\tconstructor(scene: Phaser.Scene, x: number, y: number, type: string, description: string, extra = '') {\r\n\t\tsuper(scene, x, y, 64 * 3, 64 * 3);\r\n\t\tthis.setOrigin(0);\r\n\t\tthis.type = type;\r\n\t\tthis.description = description;\r\n\t\tthis.extra = extra;\r\n\t\tscene.add.existing(this);\r\n\t\tscene.physics.add.existing(this);\r\n\t\tthis.body.setAllowGravity(false);\r\n\t\tthis.activated = false;\r\n\t}\r\n\r\n\t/*\r\n    This function decides what to do when the player touches the object, depending on its type.\r\n    */\r\n\ttouch() {\r\n\t\tswitch (this.type) {\r\n\t\t\tcase 'note':\r\n\t\t\t\tthis.showNote(this.description);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'radio':\r\n\t\t\t\tthis.useRadio();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'exit':\r\n\t\t\t\tthis.exitScene();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'hole':\r\n\t\t\t\tthis.activateHole();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'oxygen':\r\n\t\t\t\tthis.useOxygen();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'braun':\r\n\t\t\t\tthis.activateBraun();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ending':\r\n\t\t\t\tthis.revealEnding();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n    This will show a text on the screen.\r\n  */\r\n\tshowNote(note: string) {\r\n\t\tconst objectText = this.scene.add.bitmapText(\r\n\t\t\tthis.x,\r\n\t\t\tthis.y,\r\n\t\t\t'pico',\r\n\t\t\tnote,\r\n\t\t\t15,\r\n\t\t);\r\n\t\tthis.scene.tweens.add({\r\n\t\t\ttargets: objectText,\r\n\t\t\talpha: { from: 1, to: 0 },\r\n\t\t\tduration: 6000,\r\n\t\t\tease: 'Sine',\r\n\t\t\tonComplete: () => {\r\n\t\t\t\tobjectText.destroy();\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\nThis is also a text that is shown when the player reaches the exit.\r\n  */\r\n\tshowExit(note: string) {\r\n\t\tconst objectText = this.scene.add.bitmapText(\r\n\t\t\tthis.x - 128,\r\n\t\t\tthis.y - 64,\r\n\t\t\t'pico',\r\n\t\t\tnote,\r\n\t\t\t25,\r\n\t\t);\r\n\t\tthis.scene.tweens.add({\r\n\t\t\ttargets: objectText,\r\n\t\t\talpha: { from: 0.8, to: 1 },\r\n\t\t\tduration: 100,\r\n\t\t\trepeat: 5,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\nThis function will play a random static sound:\r\n  */\r\n\tuseRadio() {\r\n\t\tthis.officerAudio = this.scene.sound.add(this.description);\r\n\t\tthis.officerAudio.play();\r\n\t\tthis.officerAudio.on(\r\n\t\t\t'complete',\r\n\t\t\t() => {\r\n\t\t\t\tthis.scene.playRandomStatic();\r\n\t\t\t\tif (this.extra) this.scene.sound.add(this.extra).play();\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\nWhen the player reaches the exit, we need to do a few things: show the exit message, play the static sound and finish the scene.\r\n  */\r\n\texitScene() {\r\n\t\tthis.showExit(this.description);\r\n\t\tthis.showNote(this.extra);\r\n\t\tthis.scene.finishScene();\r\n\t}\r\n\r\n\t/*\r\nAnytime the player touches the oxygen supplies, we need to show a message and refill the oxygen.\r\n  */\r\n\tuseOxygen() {\r\n\t\tthis.showNote('Oxygen supplies!');\r\n\t\tif (this.scene.player) this.scene.player.oxygen = 100;\r\n\t\tthis.scene.updateOxygen();\r\n\t\tthis.scene.playAudio('oxygen');\r\n\t}\r\n\r\n\t/*\r\nWell, well... you can guess what happens here, right?\r\n  */\r\n\trevealEnding() {\r\n\t\tconst ohmy = this.scene.sound.add('ohmygod');\r\n\t\tohmy.play();\r\n\t\tthis.scene.cameras.main.shake(10000);\r\n\t\tthis.showExit(this.description);\r\n\t\tthis.scene.sound.add('monster').play({ volume: 1.5, rate: 0.8 });\r\n\t\tconst monster = this.scene.add\r\n\t\t\t.sprite(this.x + 128, this.y + 128, 'monster')\r\n\t\t\t.setOrigin(0.5);\r\n\t\tthis.scene.anims.create({\r\n\t\t\tkey: 'monster',\r\n\t\t\tframes: this.scene.anims.generateFrameNumbers('monster', {\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tend: 5,\r\n\t\t\t}),\r\n\t\t\tframeRate: 3,\r\n\t\t});\r\n\t\tmonster.anims.play('monster', true);\r\n\t\tohmy.on(\r\n\t\t\t'complete',\r\n\t\t\t() => {\r\n\t\t\t\tthis.scene.breathing.pause();\r\n\t\t\t\tthis.scene.playAudio('holeshout');\r\n\t\t\t\tthis.scene.finishScene(false);\r\n\t\t\t},\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\nWhen the player touches the hole, we need to create a new hole in the scene, and the player will die.\r\n  */\r\n\tactivateHole() {\r\n\t\tthis.scene.holes.add(new Hole(this.scene, this.x + 64, this.y + 64));\r\n\t}\r\n\r\n\t/*\r\nSo, when the player reaches a certain point, we need to activate \"Braun\".\r\n  */\r\n\tactivateBraun() {\r\n\t\tthis.showExit(this.description);\r\n\t\tthis.scene.playAudio('shock');\r\n\t\tnew Braun(this.scene, this.x + 128, this.y + 64);\r\n\t}\r\n}\r\n", "import EasyStar from 'https://esm.sh/easystarjs@0.4.4/es2022/easystarjs.mjs';\r\nimport Game from '../scenes/game.ts';\r\n\r\nexport default class Drone extends Phaser.GameObjects.Sprite {\r\n\tdeclare scene: Game;\r\n\tdeclare body: Phaser.Physics.Arcade.Body;\r\n\teasystar: any;\r\n\tpath: any;\r\n\tgrid: any;\r\n\tdirection!: number;\r\n\tdelayedMove?: Phaser.Time.TimerEvent;\r\n\tmoveTimeline?: Phaser.Time.Timeline;\r\n\ti?: number;\r\n\r\n\tconstructor(scene: Phaser.Scene, x: number, y: number, grid: any) {\r\n\t\tsuper(scene, x, y, 'drone');\r\n\t\tthis.name = 'drone';\r\n\t\tthis.setScale(1);\r\n\t\tthis.grid = grid;\r\n\t\tscene.add.existing(this);\r\n\t\tscene.physics.add.existing(this);\r\n\t\tthis.body.setAllowGravity(false);\r\n\t\tthis.easystar = new EasyStar.js();\r\n\t\tthis.init();\r\n\t}\r\n\r\n\t/*\r\n  Here we have to pay attention to the fact that we are using the EasyStar library to calculate the path of the drone: we have to set the grid and the acceptable tiles for the pathfinding algorithm. We also have to set the animation of the drone and the event that will trigger the movement of the drone. When it starts moving it will also reproduce the sound of the drone.\r\n  */\r\n\tinit() {\r\n\t\tthis.easystar.setGrid(this.grid);\r\n\t\tthis.easystar.setAcceptableTiles([0]);\r\n\t\tthis.scene.events.on('update', this.update, this);\r\n\t\tthis.scene.tweens.add({\r\n\t\t\ttargets: this,\r\n\t\t\tduration: 500,\r\n\t\t\trepeat: -1,\r\n\t\t\tscale: { from: 0.95, to: 1 },\r\n\t\t\tyoyo: true,\r\n\t\t});\r\n\r\n\t\tthis.scene.anims.create({\r\n\t\t\tkey: this.name,\r\n\t\t\tframes: this.scene.anims.generateFrameNumbers(this.name, {\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tend: 3,\r\n\t\t\t}),\r\n\t\t\tframeRate: 5,\r\n\t\t\trepeat: -1,\r\n\t\t});\r\n\r\n\t\tthis.anims.play(this.name, true);\r\n\t\tthis.flipX = this.direction < 0;\r\n\r\n\t\tthis.scene.time.delayedCall(\r\n\t\t\tPhaser.Math.Between(3000, 5000),\r\n\t\t\t() => {\r\n\t\t\t\tthis.scene.playAudio('kill');\r\n\t\t\t\tthis.launchMove();\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\tthis,\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n    This starts the movement of the drone:\r\n  */\r\n\tlaunchMove() {\r\n\t\tif (!this.scene) return;\r\n\t\tthis.delayedMove = this.scene.time.addEvent({\r\n\t\t\tdelay: 2000, // ms\r\n\t\t\tcallback: this.move.bind(this),\r\n\t\t\tstartAt: 0,\r\n\t\t\tcallbackScope: this,\r\n\t\t\tloop: true,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\n    This function uses EasyStar to calculate the path and then we will call a function to move the drone.\r\n  */\r\n\tmove() {\r\n\t\ttry {\r\n\t\t\tif (!this.scene.player) return;\r\n\t\t\tif (this.moveTimeline) this.moveTimeline.destroy();\r\n\r\n\t\t\tthis.easystar.findPath(\r\n\t\t\t\tMath.floor(this.x / 64),\r\n\t\t\t\tMath.floor(this.y / 64),\r\n\t\t\t\tMath.floor(this.scene.player.x / 64),\r\n\t\t\t\tMath.floor(this.scene.player.y / 64),\r\n\t\t\t\tthis.moveIt.bind(this),\r\n\t\t\t);\r\n\t\t\tthis.easystar.setIterationsPerCalculation(10000);\r\n\t\t\tthis.easystar.enableSync();\r\n\t\t\tthis.easystar.calculate();\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log('Cant move yet: ', err);\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n  And finally, this function will move the drone to the calculated path. At the end of the path, it will call the launchMove function again, so the drone can recalculate the path even if the player changes her position.\r\n  */\r\n\tmoveIt(path: any) {\r\n\t\tif (path === null) {\r\n\t\t\tconsole.log('hello sneaky pete');\r\n\t\t} else {\r\n\t\t\tconst tweens: Phaser.Types.Time.TimelineEventConfig[] = [];\r\n\t\t\tthis.i = 0;\r\n\t\t\tthis.path = path;\r\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\r\n\t\t\t\tif (this.scene.player?.dead) return;\r\n\t\t\t\tconst ex = path[i + 1].x * 64;\r\n\t\t\t\tconst ey = path[i + 1].y * 64;\r\n\t\t\t\ttweens.push({\r\n\t\t\t\t\ttween: {\r\n\t\t\t\t\t\ttargets: this,\r\n\t\t\t\t\t\tduration: 400,\r\n\t\t\t\t\t\tx: ex,\r\n\t\t\t\t\t\ty: ey,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.moveTimeline = this.scene.add.timeline(tweens).addListener(\r\n\t\t\t\t'onComplete',\r\n\t\t\t\t() => {\r\n\t\t\t\t\tthis.delayedMove?.remove();\r\n\t\t\t\t\tif (this.alpha > 0 && !this.scene.player?.dead) this.launchMove();\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n", "import Player from '../gameobjects/player.ts';\r\nimport Object from '../gameobjects/object.ts';\r\nimport Drone from '../gameobjects/drone.ts';\r\nimport HorrifiPostFx from 'phaser3-rex-plugins/plugins/horrifipipeline.js';\r\nimport Hole from '../gameobjects/hole.ts';\r\n\r\nexport default class Game extends Phaser.Scene {\r\n    player: Player | null;\r\n    score: number;\r\n    scoreText: string | null;\r\n    name!: string;\r\n    number!: number;\r\n    backgroundColors!: number[];\r\n    width!: number;\r\n    height!: number;\r\n    center_width!: number;\r\n    center_height!: number;\r\n    smokeLayer!: Phaser.GameObjects.Layer;\r\n    oxygenBar!: Phaser.GameObjects.Rectangle;\r\n    dayText!: Phaser.GameObjects.BitmapText;\r\n    playerLight!: Phaser.GameObjects.Light;\r\n    tileMap!: Phaser.Tilemaps.Tilemap;\r\n    tileSetBg!: Phaser.Tilemaps.Tileset;\r\n    tileSet!: Phaser.Tilemaps.Tileset;\r\n    platform!: Phaser.Tilemaps.TilemapLayer;\r\n    border!: Phaser.Tilemaps.TilemapLayer;\r\n    objectsLayer!: Phaser.Tilemaps.ObjectLayer;\r\n    holes!: Phaser.GameObjects.Group;\r\n    foes!: Phaser.GameObjects.Group;\r\n    objects!: Phaser.GameObjects.Group;\r\n    grid!: number[][];\r\n    trailLayer!: Phaser.GameObjects.Layer;\r\n    audios!: Record<string, Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound>;\r\n    tracker!: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n    theme!: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n    breathing!: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n    mute!: Phaser.Sound.NoAudioSound | Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;\r\n    fadeBlack!: Phaser.GameObjects.Rectangle;\r\n    failure!: Phaser.GameObjects.BitmapText;\r\n\r\n\r\n\tconstructor() {\r\n\t\tsuper({ key: 'game' });\r\n\t\tthis.player = null;\r\n\t\tthis.score = 0;\r\n\t\tthis.scoreText = null;\r\n\t}\r\n\r\n\tinit(data: { name: string, number: number}) {\r\n\t\tthis.name = data.name;\r\n\t\tthis.number = data.number;\r\n\t}\r\n\r\n\t/*\r\n  This creates the elements of the game. The background colors are relevant because they are used to set a darker color as the game progresses.\r\n  */\r\n\tcreate() {\r\n\t\tthis.backgroundColors = [\r\n\t\t\t0xae2012,\r\n\t\t\t0x961c10,\r\n\t\t\t0x50120a,\r\n\t\t\t0x40120a,\r\n\t\t\t0x30120a,\r\n\t\t\t0x2f120a,\r\n\t\t\t0x000000,\r\n\t\t];\r\n\t\tthis.width = +this.sys.game.config.width;\r\n\t\tthis.height = +this.sys.game.config.height;\r\n\t\tthis.center_width = this.width / 2;\r\n\t\tthis.center_height = this.height / 2;\r\n\t\tthis.cameras.main.setBackgroundColor(this.backgroundColors[this.number]);\r\n\r\n\t\tthis.addLight();\r\n\t\tthis.createMap();\r\n\t\tthis.smokeLayer = this.add.layer();\r\n\t\tthis.addPlayer();\r\n\t\tthis.addOxygen();\r\n\r\n\t\t// this.input.keyboard.on(\"keydown-ENTER\",\r\n\t\t// () => this.skipThis(), this); // for testing\r\n\t\tthis.cameras.main.startFollow(this.player!, true, 0.05, 0.05, 0, 0);\r\n\t\tthis.loadAudios();\r\n\t\tthis.addEffects();\r\n\t\tthis.playMusic();\r\n\t}\r\n\r\n\t/*\r\nThe oxygen bar is the only UI element in the game. It's a rectangle that changes its width according to the player's oxygen level.\r\n  */\r\n\taddOxygen() {\r\n\t\tthis.oxygenBar = this.add\r\n\t\t\t.rectangle(this.center_width, 40, this.player!.oxygen * 1.8, 20, 0x6b140b)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setScrollFactor(0);\r\n\t}\r\n\r\n\t/*\r\nThis is the method that will add the post-processing effects to the game. The game uses the HorrifiPostFx plugin, which is a custom plugin that adds a horror effect to the game.\r\n  */\r\n\taddEffects() {\r\n\t\t// this.cameras.main.setPostPipeline(HorrifiPostFx);\r\n\t}\r\n\r\n\t/*\r\nThis method will add the day text to the game. It is not used in the final version of the game, but maybe it could be useful for a future version.\r\n  */\r\n\taddDay() {\r\n\t\tthis.dayText = this.add\r\n\t\t\t.bitmapText(20, 10, 'pico', 'Day ' + (this.number + 1), 20)\r\n\t\t\t.setTint(0x6b140b)\r\n\t\t\t.setOrigin(0)\r\n\t\t\t.setScrollFactor(0)\r\n\t\t\t.setDropShadow(0, 2, 0x6b302a, 0.9);\r\n\t}\r\n\r\n\t/*\r\nWe have this method to add the light system to the game. But it's not used in the final version of the game. It could be useful for the last scene though. You can check the Camp Night game to see how it's used.\r\n  */\r\n\taddLight() {\r\n\t\tthis.lights.disable();\r\n\t\tthis.lights.setAmbientColor(0xae2012); // 0x707070\r\n\t\tthis.playerLight = this.lights\r\n\t\t\t.addLight(0, 100, 100)\r\n\t\t\t.setColor(0xffffff)\r\n\t\t\t.setIntensity(3.0);\r\n\t}\r\n\r\n\t/*\r\nThis game uses also tiled maps: with a main layer, a border layer, and an objects layer. The main layer is the one where the player can walk and it will have some obstacles. The objects layer is used to add the objects to the game, like the oxygen tanks and the holes\r\n  */\r\n\tcreateMap() {\r\n\t\tthis.tileMap = this.make.tilemap({\r\n\t\t\tkey: 'scene' + this.number,\r\n\t\t\ttileWidth: 64,\r\n\t\t\ttileHeight: 64,\r\n\t\t});\r\n\t\tthis.tileSetBg = this.tileMap.addTilesetImage('mars') ?? (()=>{throw(\"Failed to load tileset image\")})();\r\n\t\tthis.tileSet = this.tileMap.addTilesetImage('mars') ?? (()=>{throw(\"Failed to load tileset image\")})();\r\n\t\tthis.platform = this.tileMap.createLayer(\r\n\t\t\t'scene' + this.number,\r\n\t\t\tthis.tileSet,\r\n\t\t) as Phaser.Tilemaps.TilemapLayer;\r\n\t\tthis.border = this.tileMap.createLayer('border', this.tileSet) as Phaser.Tilemaps.TilemapLayer;\r\n\t\tthis.objectsLayer = this.tileMap.getObjectLayer('objects') as Phaser.Tilemaps.ObjectLayer;\r\n\t\tthis.border.setCollisionByExclusion([-1]);\r\n\t\tthis.platform.setCollisionByExclusion([-1]);\r\n\r\n\t\tthis.holes = this.add.group();\r\n\t\tthis.foes = this.add.group();\r\n\t\tthis.objects = this.add.group();\r\n\t\tthis.createGrid();\r\n\t\tthis.addObjects();\r\n\t}\r\n\r\n\t/*\r\nThis method will add the objects to the game:  we group most of them as \"objects\" and the drones as \"foes\". In the `Object` class, we will take care of treating the objects according to their type.\r\n  */\r\n\taddObjects() {\r\n\t\tthis.objectsLayer.objects.forEach((object) => {\r\n            if(!object.x || !object.y) throw(\"Object missing required properties, x & y\");\r\n\t\t\tif (object.name.startsWith('object')) {\r\n\t\t\t\tconst [_name, type, description, extra] = object.name.split(':');\r\n\t\t\t\tthis.objects.add(\r\n\t\t\t\t\tnew Object(this, object.x, object.y, type, description, extra),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (object.name.startsWith('drone')) {\r\n\t\t\t\tthis.foes.add(new Drone(this, object.x, object.y, this.grid));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\nThis method will create a grid of 40x40 cells. It will be used by the drones to move around the map.\r\n  */\r\n\tcreateGrid() {\r\n\t\tthis.grid = [];\r\n\r\n\t\tArray(40)\r\n\t\t\t.fill(0)\r\n\t\t\t.forEach((_, i) => {\r\n\t\t\t\tthis.grid[i] = [];\r\n\t\t\t\tArray(40)\r\n\t\t\t\t\t.fill(0)\r\n\t\t\t\t\t.forEach((_, j) => {\r\n\t\t\t\t\t\tconst rock = this.platform.getTileAt(Math.floor(j), Math.floor(i));\r\n\t\t\t\t\t\tconst wall = this.border.getTileAt(Math.floor(j), Math.floor(i));\r\n\t\t\t\t\t\tthis.grid[i][j] = rock || wall ? 1 : 0;\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\t/*\r\nHere we add the player element to the game. We also add the collisions between the player and the platform, the objects, the foes, and the holes.\r\n  */\r\n\taddPlayer() {\r\n\t\tthis.trailLayer = this.add.layer();\r\n\t\tconst playerPosition = this.objectsLayer.objects.find(\r\n\t\t\t(object) => object.name === 'player',\r\n\t\t);\r\n        if(!playerPosition || !playerPosition.x || !playerPosition.y) throw(\"Unable to determine playerPosition\");\r\n\t\tthis.player = new Player(this, playerPosition.x, playerPosition.y);\r\n\r\n\t\tthis.physics.add.collider(\r\n\t\t\tthis.player,\r\n\t\t\tthis.platform,\r\n\t\t\tthis.hitFloor as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n\t\t\t() => {\r\n\t\t\t\treturn true;\r\n\t\t\t},\r\n\t\t\tthis,\r\n\t\t);\r\n\r\n\t\tthis.physics.add.overlap(\r\n\t\t\tthis.player,\r\n\t\t\tthis.objects,\r\n\t\t\tthis.touchObject as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n\t\t\t() => {\r\n\t\t\t\treturn true;\r\n\t\t\t},\r\n\t\t\tthis,\r\n\t\t);\r\n\r\n\t\tthis.physics.add.overlap(\r\n\t\t\tthis.player,\r\n\t\t\tthis.foes,\r\n\t\t\tthis.playerHitByFoe as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n\t\t\t() => {\r\n\t\t\t\treturn true;\r\n\t\t\t},\r\n\t\t\tthis,\r\n\t\t);\r\n\r\n\t\tthis.physics.add.overlap(\r\n\t\t\tthis.player,\r\n\t\t\tthis.holes,\r\n\t\t\tthis.playerHitHole as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n\t\t\t() => {\r\n\t\t\t\treturn true;\r\n\t\t\t},\r\n\t\t\tthis,\r\n\t\t);\r\n\t}\r\n\r\n\thitFloor(player: Player, platform: any) {}\r\n\r\n\t/*\r\nThis is the method that will be called when the player touches an object. It will call the touch method of the object.\r\n  */\r\n\ttouchObject(player: Player, object: any) {\r\n\t\tif (object.type === 'hole') this.playTracker();\r\n\t\tif (!object.activated) {\r\n\t\t\tobject.activated = true;\r\n\t\t\tobject.touch();\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\nIf the player is hit by a foe (drone), it will die and the scene will restart.\r\n  */\r\n\tplayerHitByFoe(player: Player, foe: any) {\r\n\t\tthis.cameras.main.shake(100);\r\n\t\tthis.playAudio('killed');\r\n\t\tplayer.death();\r\n\t\tthis.restartScene();\r\n\t}\r\n\r\n\t/*\r\nWhen the player hits the hole, it will die and the scene will restart.\r\n  */\r\n\tplayerHitHole(player: Player, hole: Hole) {\r\n\t\tif (!player.dead) {\r\n\t\t\tthis.playAudio('holeshout');\r\n\t\t\thole.setAlpha(1);\r\n\t\t\tplayer.setAlpha(0);\r\n\t\t\tthis.cameras.main.shake(50);\r\n\t\t\tplayer.death();\r\n\t\t\tthis.restartScene();\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\nThis is the function that loads the audio files. The tracker has a special treatment because it will be played in a loop when the player is close to a hole.\r\n  */\r\n\tloadAudios() {\r\n\t\tthis.audios = {\r\n\t\t\tmars_background: this.sound.add('mars_background'),\r\n\t\t\tstep: this.sound.add('step'),\r\n\t\t\tkill: this.sound.add('kill'),\r\n\t\t\tblip: this.sound.add('blip'),\r\n\t\t\tohmygod: this.sound.add('ohmygod'),\r\n\t\t\tholeshout: this.sound.add('holeshout'),\r\n\t\t\toxygen: this.sound.add('oxygen'),\r\n\t\t\tshock: this.sound.add('shock'),\r\n\t\t\tkilled: this.sound.add('killed'),\r\n\t\t};\r\n\t\tthis.tracker = this.sound.add('tracker');\r\n\t}\r\n\r\n\tplayTracker() {\r\n\t\tif (!this.tracker.isPlaying) this.tracker.play();\r\n\t}\r\n\r\n\t/*\r\nWe will use this function to play static sound files (4 different files) adding some variations to the rate, delay, and volume:\r\n  */\r\n\tplayRandomStatic() {\r\n\t\tconst file = this.number < 6\r\n\t\t\t? 'static' + Phaser.Math.Between(0, 3)\r\n\t\t\t: 'creepy_static';\r\n\t\tthis.sound.add(file).play({\r\n\t\t\trate: Phaser.Math.Between(9, 11) / 10,\r\n\t\t\tdelay: 0,\r\n\t\t\tvolume: Phaser.Math.Between(5, 10) / 10,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\nThese are the functions to play the sounds, normally or with some random variations.\r\n  */\r\n\tplayAudio(key: string) {\r\n\t\tthis.audios[key].play();\r\n\t}\r\n\r\n\tplayRandom(key: string, volume = 1) {\r\n\t\tthis.audios[key].play({\r\n\t\t\trate: Phaser.Math.Between(0.9, 1),\r\n\t\t\tdetune: Phaser.Math.Between(-500, 500),\r\n\t\t\tdelay: 0,\r\n\t\t\tvolume,\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\nThis function will be used to play the officer's messages. It will play a specific sound file according to the number of the scene.\r\n  */\r\n\tplayOfficer() {\r\n\t\tthis.sound.add(`officer${this.number}`).play();\r\n\t}\r\n\r\n\t/*\r\nHere we play several sounds at the same time: the background sound, the creepy sound. It also starts the breathing sound.\r\n  */\r\n\tplayMusic() {\r\n\t\tconst theme = this.number < 6 ? 'mars_background' : 'cave';\r\n\t\tthis.theme = this.sound.add(theme);\r\n\t\tthis.theme.stop();\r\n\t\tthis.theme.play({\r\n\t\t\tmute: false,\r\n\t\t\tvolume: 1.5,\r\n\t\t\trate: 1,\r\n\t\t\tdetune: 0,\r\n\t\t\tseek: 0,\r\n\t\t\tloop: true,\r\n\t\t\tdelay: 0,\r\n\t\t});\r\n\t\tthis.sound.add('creepy').play({\r\n\t\t\tmute: false,\r\n\t\t\tvolume: 1,\r\n\t\t\trate: 1,\r\n\t\t\tdetune: 0,\r\n\t\t\tseek: 0,\r\n\t\t\tloop: true,\r\n\t\t\tdelay: 0,\r\n\t\t});\r\n\t\tthis.breathing = this.sound.add('breath');\r\n\t\tthis.breath(0.2);\r\n\t}\r\n\r\n\t/*\r\n  This function will be used to play the breathing sound. It will be called with a specific rate and volume. In the end, it will be restarted again.\r\n    */\r\n\tbreath(rate = 0.2, volume = 0.4) {\r\n\t\tconst duration = Phaser.Math.Between(500, 1000);\r\n\t\tthis.tweens.add({\r\n\t\t\ttargets: this.breathing,\r\n\t\t\tvolume: 0,\r\n\t\t\tduration,\r\n\t\t\tonComplete: () => {\r\n\t\t\t\tthis.breathing.play({ rate, volume });\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\t/*\r\nIf the player dies, the scene will restart. We show a failure message and a black rectangle that will fade in.\r\n  */\r\n\trestartScene() {\r\n\t\tconst x = this.cameras.main.worldView.centerX;\r\n\t\tconst y = this.cameras.main.worldView.centerY;\r\n\r\n\t\tthis.fadeBlack = this.add\r\n\t\t\t.rectangle(x - 100, y - 50, 10000, 11000, 0x000000)\r\n\t\t\t.setOrigin(0.5);\r\n\t\tthis.failure = this.add\r\n\t\t\t.bitmapText(x, y, 'pico', 'FAILURE', 40)\r\n\t\t\t.setTint(0x6b140b)\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setDropShadow(0, 2, 0x6b302a, 0.9);\r\n\r\n\t\tthis.tweens.add({\r\n\t\t\ttargets: [this.failure, this.fadeBlack],\r\n\t\t\talpha: { from: 0, to: 1 },\r\n\t\t\tduration: 2000,\r\n\t\t});\r\n\t\tthis.time.delayedCall(\r\n\t\t\t3000,\r\n\t\t\t() => {\r\n\t\t\t\tthis.sound.stopAll();\r\n\t\t\t\tthis.scene.start('transition', { number: this.number });\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\tthis,\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\nIf the player reaches the exit object, we finish the scene. We disable the player, play a sound, and show a black rectangle that will fade in.\r\n  */\r\n\tfinishScene(mute = true) {\r\n\t\tconst x = this.cameras.main.worldView.centerX;\r\n\t\tconst y = this.cameras.main.worldView.centerY;\r\n\r\n\t\tthis.fadeBlack = this.add\r\n\t\t\t.rectangle(x - 100, y - 50, 2000, 2000, 0x000000)\r\n\t\t\t.setOrigin(0.5);\r\n\r\n\t\tthis.tweens.add({\r\n\t\t\ttargets: [this.fadeBlack],\r\n\t\t\talpha: { from: 0, to: 1 },\r\n\t\t\tduration: 3000,\r\n\t\t});\r\n\r\n\t\tif(this.player) this.player.dead = true;\r\n\t\tthis.player?.body.stop();\r\n\t\tif (this.mute) this.sound.add('blip').play();\r\n\t\tthis.time.delayedCall(\r\n\t\t\t3000,\r\n\t\t\t() => {\r\n\t\t\t\tif (this.mute) this.sound.stopAll();\r\n\t\t\t\tthis.scene.start('transition', {\r\n\t\t\t\t\tnext: 'underwater',\r\n\t\t\t\t\tname: 'STAGE',\r\n\t\t\t\t\tnumber: this.number + 1,\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\tthis,\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\nThis function will update the oxygen bar as the player moves.\r\n  */\r\n\tupdateOxygen() {\r\n        if (this.player)\r\n\t\t    this.oxygenBar.width = this.player.oxygen * 1.8;\r\n\t}\r\n\r\n\t/*\r\n  We have this function to skip the scene. It will be used for testing purposes.\r\n    */\r\n\tskipThis() {\r\n\t\tif (this.player) this.player.dead = true;\r\n\t\tthis.player?.body.stop();\r\n\t\tthis.theme.stop();\r\n\t\tthis.scene.start('transition', { number: this.number + 1 });\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": ["Phaser", "Object", "Object", "_", "Phaser"]
}
