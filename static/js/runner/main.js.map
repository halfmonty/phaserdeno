{
  "version": 3,
  "sources": ["../../../games/runner/main.ts", "../../../games/runner/gameobjects/player.ts", "../../../games/runner/gameobjects/generator.ts", "../../../games/runner/scenes/game.ts", "../../../games/runner/scenes/gameover.ts"],
  "sourcesContent": ["import Phaser from 'https://esm.sh/phaser@4.0.0-rc.4';\r\nimport Game from './scenes/game.ts';\r\nimport GameOver from './scenes/gameover.ts';\r\n/*\r\nThis is the main configuration file for the game.\r\n*/\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n\twidth: 600,\r\n\theight: 300,\r\n\tscale: {\r\n\t\tmode: Phaser.Scale.FIT,\r\n\t\tautoCenter: Phaser.Scale.CENTER_BOTH,\r\n\t},\r\n\tautoRound: false,\r\n\tparent: 'game-container',\r\n\tphysics: {\r\n\t\tdefault: 'arcade',\r\n\t\tarcade: {\r\n\t\t\tgravity: { x: 0, y: 350 },\r\n\t\t\tdebug: true,\r\n\t\t},\r\n\t},\r\n\tscene: [Game, GameOver],\r\n};\r\n\r\nexport const game = new Phaser.Game(config);\r\n", "class Player extends Phaser.GameObjects.Rectangle {\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n  jumping: boolean;\r\n  invincible: boolean;\r\n  health: number;\r\n  \r\n  constructor(scene: Phaser.Scene, x: number, y: number, number?: number) {\r\n    super(scene, x, y, 32, 32, 0x00ff00);\r\n    this.setOrigin(0.5);\r\n    this.scene.add.existing(this);\r\n    this.scene.physics.add.existing(this);\r\n    this.body.collideWorldBounds = true;\r\n    this.setScale(1);\r\n    this.jumping = false;\r\n    this.invincible = false;\r\n    this.health = 10;\r\n    this.body.mass = 10\r\n    this.body.setDragY(10);\r\n  }\r\n}\r\n\r\nexport default Player;", "import Game from \"../scenes/game.ts\";\r\n\r\nexport default class Generator {\r\n  scene: Game;\r\n  pinos: number;\r\n  constructor(scene: Game) {\r\n    this.scene = scene;\r\n    this.scene.time.delayedCall(2000, () => this.init(), undefined, this);\r\n    this.pinos = 0;\r\n  }\r\n\r\n  init() {\r\n    this.generateCloud();\r\n    this.generateObstacle();\r\n    this.generateCoin();\r\n  }\r\n  /*\r\nThis is the function that generates the clouds. It creates a new cloud and then calls itself again after a random amount of time.\r\n\r\nThis is done using the Phaser `time.delayedCall` function.\r\n*/\r\n  generateCloud() {\r\n    new Cloud(this.scene);\r\n    this.scene.time.delayedCall(\r\n      Phaser.Math.Between(2000, 3000),\r\n      () => this.generateCloud(),\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  generateObstacle() {\r\n    this.scene.obstacles.add(\r\n      new Obstacle(\r\n        this.scene,\r\n        800,\r\n        this.scene.height - Phaser.Math.Between(32, 128)\r\n      )\r\n    );\r\n    this.scene.time.delayedCall(\r\n      Phaser.Math.Between(1500, 2500),\r\n      () => this.generateObstacle(),\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  generateCoin() {\r\n    this.scene.coins.add(\r\n      new Coin(\r\n        this.scene,\r\n        800,\r\n        this.scene.height - Phaser.Math.Between(32, 128)\r\n      )\r\n    );\r\n    this.scene.time.delayedCall(\r\n      Phaser.Math.Between(500, 1500),\r\n      () => this.generateCoin(),\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nThis is a game object that represents a cloud. It's a simple rectangle with a random size and position. We use a tween to move it from right to left, and then destroy it when it's out of the screen.\r\n*/\r\nexport class Cloud extends Phaser.GameObjects.Rectangle {\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n  constructor(scene: Phaser.Scene, x = 800, y = Phaser.Math.Between(0, 100)) {\r\n    /**\r\n     * **Typescript addition**\r\n     * In the JS version:\r\n     * - undefined was passed as x but then the tween in init would immediately set it to 800\r\n     * - undefined was passed as y but then finalY was set to a random value between 0 and 100\r\n     *\r\n     * So to make Typescript happy we instead use the default values in the constructor signature\r\n     */\r\n    super(scene, x, y, 98, 32, 0xffffff);\r\n    scene.add.existing(this);\r\n    const alpha = 1 / Phaser.Math.Between(1, 3);\r\n\r\n    this.setScale(alpha);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.scene.tweens.add({\r\n      targets: this,\r\n      x: { from: 800, to: -100 },\r\n      duration: 2000 / this.scale,\r\n      onComplete: () => {\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n/*\r\nThis is a game object that represents an obstacle. It works exactly like the cloud, but it's a red rectangle that is part of the obstacles group that we created in the `game` scene. It can kill the player if it touches it.\r\n*/\r\nexport class Obstacle extends Phaser.GameObjects.Rectangle {\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n  constructor(scene: Phaser.Scene, x: number, y: number) {\r\n    super(scene, x, y, 32, 32, 0xff0000);\r\n    scene.add.existing(this);\r\n    scene.physics.add.existing(this);\r\n    this.body.setAllowGravity(false);\r\n    const alpha = 1 / Phaser.Math.Between(1, 3);\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.scene.tweens.add({\r\n      targets: this,\r\n      x: { from: 820, to: -100 },\r\n      duration: 2000,\r\n      onComplete: () => {\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n/*\r\nThis is a game object that represents a coin. It's an animated sprite that is part of the coins group that we created in the `game` scene. It moves like the previous cloud and the obstacle objects.\r\n\r\nIt can increase the player's score if it touches it.\r\n*/\r\nexport class Coin extends Phaser.GameObjects.Sprite {\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n  constructor(scene: Phaser.Scene, x: number, y: number) {\r\n    super(scene, x, y, \"coin\");\r\n    scene.add.existing(this);\r\n    scene.physics.add.existing(this);\r\n    this.body.setAllowGravity(false);\r\n    const alpha = 1 / Phaser.Math.Between(1, 3);\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.scene.tweens.add({\r\n      targets: this,\r\n      x: { from: 820, to: -100 },\r\n      duration: 2000,\r\n      onComplete: () => {\r\n        this.destroy();\r\n      },\r\n    });\r\n\r\n    const coinAnimation = this.scene.anims.create({\r\n      key: \"coin\",\r\n      frames: this.scene.anims.generateFrameNumbers(\"coin\", {\r\n        start: 0,\r\n        end: 7,\r\n      }),\r\n      frameRate: 8,\r\n    });\r\n    this.play({ key: \"coin\", repeat: -1 });\r\n  }\r\n}", "import Player from \"../gameobjects/player.ts\";\r\nimport Generator, { Coin, Obstacle } from \"../gameobjects/generator.ts\";\r\n\r\nexport default class Game extends Phaser.Scene {\r\n  player: Player | null;\r\n  score: number;\r\n  scoreText: Phaser.GameObjects.BitmapText | null;\r\n  number!: number;\r\n  width!: number;\r\n  height!: number;\r\n  center_width!: number;\r\n  center_height!: number;\r\n  obstacles!: Phaser.GameObjects.Group;\r\n  coins!: Phaser.GameObjects.Group;\r\n  generator!: Generator;\r\n  SPACE!: Phaser.Input.Keyboard.Key;\r\n  updateScoreEvent!: Phaser.Time.TimerEvent;\r\n  audios!: {\r\n    jump:\r\n      | Phaser.Sound.NoAudioSound\r\n      | Phaser.Sound.HTML5AudioSound\r\n      | Phaser.Sound.WebAudioSound;\r\n    coin:\r\n      | Phaser.Sound.NoAudioSound\r\n      | Phaser.Sound.HTML5AudioSound\r\n      | Phaser.Sound.WebAudioSound;\r\n    dead:\r\n      | Phaser.Sound.NoAudioSound\r\n      | Phaser.Sound.HTML5AudioSound\r\n      | Phaser.Sound.WebAudioSound;\r\n  };\r\n  theme!:\r\n    | Phaser.Sound.NoAudioSound\r\n    | Phaser.Sound.HTML5AudioSound\r\n    | Phaser.Sound.WebAudioSound;\r\n  jumpTween: any;\r\n  name!: string;\r\n\r\n  constructor() {\r\n    super({ key: \"game\" });\r\n    this.player = null;\r\n    this.score = 0;\r\n    this.scoreText = null;\r\n  }\r\n\r\n  init(data: { name: string; number: number }) {\r\n    this.name = data.name;\r\n    this.number = data.number;\r\n  }\r\n\r\n  /*\r\n    We use the `preload` method to load all the assets that we need for the game.\r\n    We also set the score to 0 in the registry, so we can access it from other scenes.\r\n    */\r\n  preload() {\r\n    this.registry.set(\"score\", \"0\");\r\n    this.load.audio(\"coin\", \"assets/runner/sounds/coin.mp3\");\r\n    this.load.audio(\"jump\", \"assets/runner/sounds/jump.mp3\");\r\n    this.load.audio(\"dead\", \"assets/runner/sounds/dead.mp3\");\r\n    this.load.audio(\"theme\", \"assets/runner/sounds/theme.mp3\");\r\n    this.load.spritesheet(\"coin\", \"./assets/runner/images/coin.png\", {\r\n      frameWidth: 32,\r\n      frameHeight: 32,\r\n    });\r\n    this.load.bitmapFont(\r\n      \"arcade\",\r\n      \"assets/runner/fonts/arcade.png\",\r\n      \"assets/runner/fonts/arcade.xml\"\r\n    );\r\n    this.score = 0;\r\n  }\r\n\r\n  /*\r\nHere we do several things.\r\n\r\n- We use the `create` method to initialize the game.\r\n- We set some variables to store width and height that we may need later.,\r\n- We set the background color, and create the player, the obstacles, and the coins.\r\n- We also create the keyboard input to listen to the space key.\r\n- Also, we add a collider between the player and the obstacles and an overlap\r\nbetween the player and the coins. The key part there is to set a function that will be called when the player overlaps with a coin or hits an obstacle.\r\n*/\r\n  create() {\r\n    this.width = Number(this.sys.game.config.width);\r\n    this.height = Number(this.sys.game.config.height);\r\n    this.center_width = this.width / 2;\r\n    this.center_height = this.height / 2;\r\n\r\n    this.cameras.main.setBackgroundColor(0x87ceeb);\r\n    this.obstacles = this.add.group();\r\n    this.coins = this.add.group();\r\n    this.generator = new Generator(this);\r\n\r\n    if (!this.input.keyboard) throw Error(\"No keyboard found\");\r\n\r\n    this.SPACE = this.input.keyboard.addKey(\r\n      Phaser.Input.Keyboard.KeyCodes.SPACE\r\n    );\r\n    this.player = new Player(this, this.center_width - 100, this.height - 200);\r\n    this.scoreText = this.add.bitmapText(\r\n      this.center_width,\r\n      10,\r\n      \"arcade\",\r\n      this.score.toString(),\r\n      20\r\n    );\r\n\r\n    /**\r\n     * Typescript Addition: The collider callback is typed very poorly in the\r\n     * Phaser types. The type as written completely ignores the actual arguments\r\n     * passed to the callback. Ideally the callback would be typed via generics\r\n     * to allow for the correct types to be passed to the callback. However\r\n     * since this is not possible we will use the `as` keyword to cast the\r\n     * callback to the correct type, which allows the actual function to\r\n     * continue to assume the correct types for it's parameters.\r\n     *\r\n     * See: https://github.com/phaserjs/phaser/issues/5882 P.S.: This issue is\r\n     * the exact reason I am creating this Typescript conversion!\r\n     */\r\n    this.physics.add.collider(\r\n      this.player,\r\n      this.obstacles,\r\n      this.hitObstacle as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.physics.add.overlap(\r\n      this.player,\r\n      this.coins,\r\n      this.hitCoin as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.loadAudios();\r\n    this.playMusic();\r\n\r\n    /*\r\n    We use the `pointerdown` event to listen to the mouse click or touch event.\r\n    */\r\n    this.input.on(\r\n      \"pointerdown\",\r\n      (pointer: Phaser.Input.Pointer) => this.jump(),\r\n      this\r\n    );\r\n\r\n    /*\r\n    We use `updateScoreEvent` to update the score every 100ms so the player can see the score increasing as long as he survives.\r\n    */\r\n    this.updateScoreEvent = this.time.addEvent({\r\n      delay: 100,\r\n      callback: () => this.updateScore(),\r\n      callbackScope: this,\r\n      loop: true,\r\n    });\r\n  }\r\n\r\n  /*\r\nThis method is called when the player hits an obstacle. We stop the updateScoreEvent so the score doesn't increase anymore.\r\n\r\nAnd obviously, we finish the scene.\r\n*/\r\n  hitObstacle(player: Player, obstacle: Obstacle) {\r\n    this.updateScoreEvent.destroy();\r\n    this.finishScene();\r\n  }\r\n\r\n  /*\r\nThis method is called when the player hits a coin. We play a sound, update the score, and destroy the coin.\r\n*/\r\n  hitCoin(player: Player, coin: Coin) {\r\n    this.playAudio(\"coin\");\r\n    this.updateScore(1000);\r\n    coin.destroy();\r\n  }\r\n\r\n  /*\r\nWe use this `loadAudios` method to load all the audio files that we need for the game.\r\n\r\nThen we'll play them using the `playAudio` method.\r\n*/\r\n  loadAudios() {\r\n    this.audios = {\r\n      jump: this.sound.add(\"jump\"),\r\n      coin: this.sound.add(\"coin\"),\r\n      dead: this.sound.add(\"dead\"),\r\n    };\r\n  }\r\n\r\n  playAudio(key: keyof typeof this.audios) {\r\n    this.audios[key].play();\r\n  }\r\n\r\n  /*\r\n  This method is specific to the music. We use it to play the theme music in a loop.\r\n  */\r\n  playMusic(theme = \"theme\") {\r\n    this.theme = this.sound.add(theme);\r\n    this.theme.stop();\r\n    this.theme.play({\r\n      mute: false,\r\n      volume: 1,\r\n      rate: 1,\r\n      detune: 0,\r\n      seek: 0,\r\n      loop: true,\r\n      delay: 0,\r\n    });\r\n  }\r\n\r\n  /*\r\nThis is the game loop. The function is called every frame.\r\n\r\nHere is where we can check if a key was pressed or the situation of the player to act accordingly. We use the `update` method to check if the player pressed the space key.\r\n*/\r\n  override update() {\r\n    if (Phaser.Input.Keyboard.JustDown(this.SPACE)) {\r\n      this.jump();\r\n    } else if (this.player?.body.blocked.down) {\r\n      this.jumpTween?.stop();\r\n      this.player.rotation = 0;\r\n      // ground\r\n    }\r\n  }\r\n\r\n  /*\r\nThis is the method that we use to make the player jump. A jump is just a velocity in the Y-axis. Gravity will do the rest.\r\n\r\nWe also play a jumping sound and we add a tween to rotate the player while jumping.\r\n*/\r\n  jump() {\r\n    if (!this.player?.body.blocked.down) return;\r\n    this.player.body.setVelocityY(-300);\r\n\r\n    this.playAudio(\"jump\");\r\n    this.jumpTween = this.tweens.add({\r\n      targets: this.player,\r\n      duration: 1000,\r\n      angle: { from: 0, to: 360 },\r\n      repeat: -1,\r\n    });\r\n  }\r\n\r\n  /*\r\nWhat should we do when we finish the game scene?\r\n\r\n- Stop the theme music\r\n- Play the dead sound\r\n- Set the score in the registry to show it in the `gameover` scene.\r\n- Start the `gameover` scene.\r\n\r\n*/\r\n  finishScene() {\r\n    this.theme.stop();\r\n    this.playAudio(\"dead\");\r\n    this.registry.set(\"score\", \"\" + this.score);\r\n    this.scene.start(\"gameover\");\r\n  }\r\n\r\n  /*\r\nThis method is called every 100ms and it is used to update the score and show it on the screen.\r\n*/\r\n  updateScore(points = 1) {\r\n    this.score += points;\r\n    this.scoreText?.setText(this.score.toString());\r\n  }\r\n}", "export default class GameOver extends Phaser.Scene {\r\n  width!: number;\r\n  height!: number;\r\n  center_width!: number;\r\n  center_height!: number;\r\n\r\n  constructor() {\r\n    super({ key: \"gameover\" });\r\n  }\r\n\r\n  create() {\r\n    this.width = Number(this.sys.game.config.width);\r\n    this.height = Number(this.sys.game.config.height);\r\n    this.center_width = this.width / 2;\r\n    this.center_height = this.height / 2;\r\n\r\n    this.cameras.main.setBackgroundColor(0x87ceeb);\r\n\r\n    this.add\r\n      .bitmapText(\r\n        this.center_width,\r\n        50,\r\n        \"arcade\",\r\n        this.registry.get(\"score\"),\r\n        25\r\n      )\r\n      .setOrigin(0.5);\r\n    this.add\r\n      .bitmapText(\r\n        this.center_width,\r\n        this.center_height,\r\n        \"arcade\",\r\n        \"GAME OVER\",\r\n        45\r\n      )\r\n      .setOrigin(0.5);\r\n    this.add\r\n      .bitmapText(\r\n        this.center_width,\r\n        250,\r\n        \"arcade\",\r\n        \"Press SPACE or Click to restart!\",\r\n        15\r\n      )\r\n      .setOrigin(0.5);\r\n    this.input.keyboard?.on(\"keydown-SPACE\", this.startGame, this);\r\n    this.input.on(\r\n      \"pointerdown\",\r\n      (pointer: Phaser.Input.Pointer) => this.startGame(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Typescript Addition:\r\n   * To the best of my knowledge, this method is not used anywhere in the codebase.\r\n   *\r\n   * It is attempting to add to an `introLayer` property which is not defined anywhere.\r\n   *\r\n   * So to make Typescript happy (since it doesn't know what `introLayer` is) I just commented it out.\r\n   *\r\n   * However, if I had to make an educated guess I assume it was meant to be a Phaser.GameObjects.Layer\r\n   */\r\n  // showLine(text: string, y:number) {\r\n  //   let line = this.introLayer.add(\r\n  //     this.add\r\n  //       .bitmapText(this.center_width, y, \"pixelFont\", text, 25)\r\n  //       .setOrigin(0.5)\r\n  //       .setAlpha(0)\r\n  //   );\r\n  //   this.tweens.add({\r\n  //     targets: line,\r\n  //     duration: 2000,\r\n  //     alpha: 1,\r\n  //   });\r\n  // }\r\n\r\n  startGame() {\r\n    this.scene.start(\"game\");\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["Phaser", "Phaser"]
}
