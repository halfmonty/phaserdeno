{
  "version": 3,
  "sources": ["../../../games/starshake/main.ts", "../../../games/starshake/scenes/boodloader.ts", "../../../games/starshake/gameobjects/foe_shot.ts", "../../../games/starshake/gameobjects/explosion.ts", "../../../games/starshake/gameobjects/foe.ts", "../../../games/starshake/gameobjects/foe_generator.ts", "../../../games/starshake/gameobjects/particle.ts", "../../../games/starshake/gameobjects/shot.ts", "../../../games/starshake/gameobjects/shooting_patterns.ts", "../../../games/starshake/gameobjects/player.ts", "../../../games/starshake/gameobjects/powerup.ts", "../../../games/starshake/gameobjects/scene_effect.ts", "../../../games/starshake/scenes/game.ts", "../../../games/starshake/scenes/splash.ts", "../../../games/starshake/scenes/transition.ts", "../../../games/starshake/scenes/outro.ts"],
  "sourcesContent": ["import Phaser from 'https://esm.sh/phaser@4.0.0-rc.4';\r\nimport Bootloader from \"./scenes/boodloader.ts\";\r\nimport Game from \"./scenes/game.ts\";\r\nimport Splash from \"./scenes/splash.ts\";\r\nimport Transition from \"./scenes/transition.ts\";\r\nimport Outro from \"./scenes/outro.ts\";\r\n\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n    width: 1000,\r\n    height: 800,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH\r\n    },\r\n    autoRound: false,\r\n    parent: \"game-container\",\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            gravity: { x: 0, y: 0},\r\n            debug: false\r\n        }\r\n    },\r\n    scene: [Bootloader, Game, Splash, Transition, Outro]\r\n}\r\n\r\nexport const game = new Phaser.Game(config);", "export default class Bootloader extends Phaser.Scene {\r\n  progressBar!: Phaser.GameObjects.Graphics;\r\n  loadBar!: Phaser.GameObjects.Graphics;\r\n  constructor() {\r\n    super({ key: \"bootloader\" });\r\n  }\r\n\r\n  /*\r\n    Here we split the loading of the assets into different functions.\r\n    */\r\n  preload() {\r\n    this.createBars();\r\n    this.setLoadEvents();\r\n    this.loadFonts();\r\n    this.loadImages();\r\n    this.loadAudios();\r\n    this.loadSpritesheets();\r\n    this.setRegistry();\r\n  }\r\n\r\n  /*\r\n    These are the events we need to control the loading bar and change to splash scene when complete.\r\n    */\r\n  setLoadEvents() {\r\n    this.load.on(\r\n      \"progress\",\r\n      function (this: Bootloader, value: number) {\r\n        this.progressBar.clear();\r\n        this.progressBar.fillStyle(0x0088aa, 1);\r\n        this.progressBar.fillRect(\r\n          this.cameras.main.width / 4,\r\n          this.cameras.main.height / 2 - 16,\r\n          (this.cameras.main.width / 2) * value,\r\n          16\r\n        );\r\n      },\r\n      this\r\n    );\r\n\r\n    this.load.on(\r\n      \"complete\",\r\n      () => {\r\n        this.scene.start(\"splash\");\r\n      },\r\n      this\r\n    );\r\n  }\r\n\r\n  /*\r\n    Load the fonts we use in the game.\r\n    */\r\n  loadFonts() {\r\n    this.load.bitmapFont(\r\n      \"wendy\",\r\n      \"assets/starshake/fonts/wendy.png\",\r\n      \"assets/starshake/fonts/wendy.xml\"\r\n    );\r\n  }\r\n\r\n  /*\r\n    Load the images we use in the game.\r\n    */\r\n  loadImages() {\r\n    this.load.image(\"logo\", \"assets/starshake/images/logo.png\");\r\n    this.load.image(\"pello_logo\", \"assets/starshake/images/pello_logo.png\");\r\n    this.load.image(\"background\", \"assets/starshake/images/background.png\");\r\n    Array(4)\r\n      .fill(0)\r\n      .forEach((_, i) => {\r\n        this.load.image(`stage${i + 1}`, `assets/starshake/images/stage${i + 1}.png`);\r\n      });\r\n  }\r\n\r\n  /*\r\n    Load the audio (sound effects and music) we use in the game.\r\n    */\r\n  loadAudios() {\r\n    this.load.audio(\"shot\", \"assets/starshake/sounds/shot.mp3\");\r\n    this.load.audio(\"foeshot\", \"assets/starshake/sounds/foeshot.mp3\");\r\n    this.load.audio(\"foedestroy\", \"assets/starshake/sounds/foedestroy.mp3\");\r\n    this.load.audio(\"foexplosion\", \"assets/starshake/sounds/foexplosion.mp3\");\r\n    this.load.audio(\"explosion\", \"assets/starshake/sounds/explosion.mp3\");\r\n    this.load.audio(\"stageclear1\", \"assets/starshake/sounds/stageclear1.mp3\");\r\n    this.load.audio(\"stageclear2\", \"assets/starshake/sounds/stageclear2.mp3\");\r\n    this.load.audio(\"boss\", \"assets/starshake/sounds/boss.mp3\");\r\n    this.load.audio(\"splash\", \"assets/starshake/sounds/splash.mp3\");\r\n    Array(3)\r\n      .fill(0)\r\n      .forEach((_, i) => {\r\n        this.load.audio(`music${i + 1}`, `assets/starshake/sounds/music${i + 1}.mp3`);\r\n      });\r\n  }\r\n\r\n  /*\r\n    Load the sprite sheets (animated images) we use in the game.\r\n    */\r\n  loadSpritesheets() {\r\n    this.load.spritesheet(\"player1\", \"assets/starshake/images/player1.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n    this.load.spritesheet(\"foe0\", \"assets/starshake/images/foe0.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n    this.load.spritesheet(\"foe1\", \"assets/starshake/images/foe1.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n    this.load.spritesheet(\"foe2\", \"assets/starshake/images/foe2.png\", {\r\n      frameWidth: 32,\r\n      frameHeight: 32,\r\n    });\r\n    this.load.spritesheet(\"guinxu\", \"assets/starshake/images/guinxu.png\", {\r\n      frameWidth: 128,\r\n      frameHeight: 144,\r\n    });\r\n    this.load.spritesheet(\"plenny0\", \"assets/starshake/images/plenny0.png\", {\r\n      frameWidth: 64,\r\n      frameHeight: 64,\r\n    });\r\n  }\r\n\r\n  /*\r\n    Set the initial values of the registry. The game was designed to be played by two players, but it can be played by one.\r\n    */\r\n  setRegistry() {\r\n    this.registry.set(\"score_player1\", 0);\r\n    this.registry.set(\"power_player1\", \"water\");\r\n    this.registry.set(\"lives_player1\", 0);\r\n\r\n    this.registry.set(\"score_player2\", 0);\r\n    this.registry.set(\"power_player2\", \"water\");\r\n    this.registry.set(\"lives_player2\", 0);\r\n  }\r\n\r\n  /*\r\n    Create the bars we use to show the loading progress.\r\n    */\r\n  createBars() {\r\n    this.loadBar = this.add.graphics();\r\n    this.loadBar.fillStyle(0xd40000, 1);\r\n    this.loadBar.fillRect(\r\n      this.cameras.main.width / 4 - 2,\r\n      this.cameras.main.height / 2 - 18,\r\n      this.cameras.main.width / 2 + 4,\r\n      20\r\n    );\r\n    this.progressBar = this.add.graphics();\r\n  }\r\n}", "import { FoeType } from \"./foe.ts\";\r\n\r\nconst TYPES = {\r\n  chocolate: { color: 0xaf8057, radius: 16, intensity: 0.4 },\r\n  vanila: { color: 0xfff6d5, radius: 16, intensity: 0.4 },\r\n  fruit: { color: 0x00ff00, radius: 16, intensity: 0.4 },\r\n  water: { color: 0x0000cc, radius: 16, intensity: 0.4 },\r\n  foe: { color: 0xfff01f, radius: 16, intensity: 0.4 },\r\n} as const;\r\n\r\nclass FoeShot extends Phaser.GameObjects.PointLight {\r\n  playerName: FoeType;\r\n  shadow!: Phaser.GameObjects.Arc & { body: Phaser.Physics.Arcade.Body };\r\n\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n  constructor(\r\n    scene: Phaser.Scene,\r\n    x: number,\r\n    y: number,\r\n    type: keyof typeof TYPES = \"water\",\r\n    playerName: FoeType,\r\n    velocityX = 0,\r\n    velocityY = -300\r\n  ) {\r\n    const { color, radius, intensity } = TYPES[type];\r\n    super(scene, x, y, color, radius, intensity);\r\n    this.name = \"foeshot\";\r\n    this.scene = scene;\r\n    this.playerName = playerName;\r\n    this.spawnShadow(x, y, velocityX, velocityY);\r\n    scene.add.existing(this);\r\n    scene.physics.add.existing(this);\r\n    if (playerName === \"guinxu\") this.body.setVelocity(velocityX, velocityY);\r\n    this.body.setAllowGravity(false);\r\n    this.body.setCollideWorldBounds(true);\r\n    this.body.onWorldBounds = true;\r\n    this.body.setCircle(10);\r\n    this.body.setOffset(6, 9);\r\n\r\n    this.init();\r\n  }\r\n\r\n  /*\r\n    This function spawns a shadow for each shot. We'll have to update it with the shot itself.\r\n    */\r\n  spawnShadow(x: number, y: number, velocityX: number, velocityY: number) {\r\n    /**\r\n     * Typescript addition: I would love to do this better. I hate type\r\n     * assertions! However, it's better to do one assertion here on creation\r\n     * rather than every time we use it.\r\n     */\r\n    this.shadow = this.scene.add\r\n      .circle(x + 20, y + 20, 10, 0x000000)\r\n      .setAlpha(0.4) as typeof this.shadow;\r\n    this.scene.add.existing(this.shadow);\r\n    this.scene.physics.add.existing(this.shadow);\r\n    if (this.playerName === \"guinxu\")\r\n      this.shadow.body?.setVelocity(velocityX, velocityY);\r\n  }\r\n\r\n  /*\r\n    This function adds a simple effect to the shot to make it flicker.\r\n    */\r\n  init() {\r\n    this.scene.tweens.add({\r\n      targets: this,\r\n      duration: 200,\r\n      intensity: { from: 0.3, to: 0.7 },\r\n      repeat: -1,\r\n    });\r\n  }\r\n\r\n  /*\r\n    This function is called when the shot is destroyed, adding an explosion effect along with a tween and showing the points.\r\n    */\r\n  shot() {\r\n    const explosion = this.scene.add\r\n      .circle(this.x, this.y, 5)\r\n      .setStrokeStyle(10, 0xffffff);\r\n    this.showPoints(50);\r\n    this.scene.tweens.add({\r\n      targets: explosion,\r\n      radius: { from: 5, to: 20 },\r\n      alpha: { from: 1, to: 0 },\r\n      duration: 250,\r\n      onComplete: () => {\r\n        explosion.destroy();\r\n      },\r\n    });\r\n    this.destroy();\r\n  }\r\n\r\n  /*\r\n    This function shows the points when the shot is destroyed. The points are shown in a bitmap text and they are tweened to make them move up and fade out.\r\n    */\r\n  showPoints(score: number, color = 0xff0000) {\r\n    let text = this.scene.add\r\n      .bitmapText(this.x + 20, this.y - 30, \"wendy\", \"+\" + score, 40, color)\r\n      .setOrigin(0.5);\r\n    this.scene.tweens.add({\r\n      targets: text,\r\n      duration: 800,\r\n      alpha: { from: 1, to: 0 },\r\n      y: { from: this.y - 20, to: this.y - 80 },\r\n      onComplete: () => {\r\n        text.destroy();\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default FoeShot;", "class Explosion {\r\n  scene: Phaser.Scene;\r\n  radius: number;\r\n  x: number;\r\n  y: number;\r\n  lights: Phaser.GameObjects.PointLight[];\r\n\r\n  constructor(\r\n    scene: Phaser.Scene,\r\n    x: number,\r\n    y: number,\r\n    radius = 5,\r\n    min = 5,\r\n    max = 7\r\n  ) {\r\n    this.scene = scene;\r\n    this.radius = radius;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.lights = Array(Phaser.Math.Between(min, max))\r\n      .fill(0)\r\n      .map((_, _i) => {\r\n        const offsetX =\r\n          this.x + Phaser.Math.Between(-this.radius / 2, this.radius / 2);\r\n        const offsetY =\r\n          this.y + Phaser.Math.Between(-this.radius / 2, -this.radius / 2);\r\n        const color = Phaser.Math.Between(0xff0000, 0xffffcc);\r\n        const radius = Phaser.Math.Between(this.radius / 2, this.radius);\r\n        const intensity = Phaser.Math.Between(0.3, 0.8);\r\n        return scene.lights.addPointLight(\r\n          offsetX,\r\n          offsetY,\r\n          color,\r\n          radius,\r\n          intensity\r\n        );\r\n      });\r\n    this.init();\r\n  }\r\n\r\n  /*\r\n    This adds a simple effect to the explosion to shrink the lights.\r\n    */\r\n  init() {\r\n    this.scene.tweens.add({\r\n      targets: this.lights,\r\n      duration: Phaser.Math.Between(600, 1000),\r\n      scale: { from: 1, to: 0 },\r\n    });\r\n  }\r\n}\r\n\r\nexport default Explosion;", "import FoeShot from \"./foe_shot.ts\";\r\nimport Explosion from \"./explosion.ts\";\r\nimport Game from \"../scenes/game.ts\";\r\n\r\nconst TYPES = {\r\n  foe0: { points: 400, lives: 1 },\r\n  foe1: { points: 500, lives: 3 },\r\n  foe2: { points: 800, lives: 2 },\r\n  guinxu: { points: 10000, lives: 20 },\r\n} as const;\r\n\r\nexport type FoeType = keyof typeof TYPES;\r\n\r\nclass Foe extends Phaser.GameObjects.Sprite {\r\n  shadow!:\r\n    | (Phaser.GameObjects.Image & { body: Phaser.Physics.Arcade.Body })\r\n    | null;\r\n  points: number;\r\n  lives: number;\r\n  id: number;\r\n  patternIndex!: number;\r\n  pattern!: number[];\r\n  direction!: number;\r\n\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n  declare scene: Game;\r\n  declare name: FoeType;\r\n\r\n  constructor(\r\n    scene: Game,\r\n    x: number,\r\n    y: number,\r\n    name: FoeType = \"foe0\",\r\n    velocityX = 0,\r\n    velocityY = 0\r\n  ) {\r\n    super(scene, x, y, name);\r\n    this.name = name;\r\n    this.points = TYPES[name].points;\r\n    this.lives = TYPES[name].lives;\r\n    this.id = Math.random();\r\n    if (this.name !== \"foe2\") {\r\n      this.spawnShadow(x, y);\r\n    }\r\n    scene.add.existing(this);\r\n    scene.physics.add.existing(this);\r\n    this.body.setAllowGravity(false);\r\n    this.body.setCircle(19);\r\n    this.body.setOffset(12, 12);\r\n    this.body.setVelocityX(velocityX);\r\n    this.body.setVelocityY(velocityY);\r\n    this.setData(\"vector\", new Phaser.Math.Vector2());\r\n    if (this.name === \"guinxu\") {\r\n      this.setGuinxuShot();\r\n    }\r\n    this.init();\r\n  }\r\n\r\n  /*\r\n    This function sets a tween to the Guinxu foe, so it moves in a zig-zag pattern.\r\n    */\r\n  setGuinxuShot() {\r\n    this.patternIndex = 0;\r\n    this.pattern = Phaser.Utils.Array.NumberArrayStep(-300, 300, 50);\r\n    this.pattern = this.pattern.concat(\r\n      Phaser.Utils.Array.NumberArrayStep(300, -300, -50)\r\n    );\r\n    this.scene.tweens.add({\r\n      targets: this,\r\n      duration: 2000,\r\n      y: { from: this.y, to: this.y + Phaser.Math.Between(100, -100) },\r\n      x: { from: this.x, to: this.x + Phaser.Math.Between(100, -100) },\r\n      yoyo: true,\r\n      repeat: -1,\r\n    });\r\n  }\r\n\r\n  /*\r\n    This function spawns a shadow for each foe. We'll have to update it with the foe itself.\r\n    */\r\n  spawnShadow(x: number, y: number) {\r\n    /**\r\n     * Typescript addition: I would love to do this better. I hate type\r\n     * assertions! However, it's better to do one assertion here on creation\r\n     * rather than every time we use it.\r\n     */\r\n    this.shadow = this.scene.add\r\n      .image(x + 20, y + 20, this.name)\r\n      .setScale(0.7)\r\n      .setTint(0x000000)\r\n      .setAlpha(0.4) as NonNullable<typeof this.shadow>;\r\n  }\r\n\r\n  updateShadow() {\r\n    if (!this.shadow) return;\r\n    this.shadow.x = this.x + 20;\r\n    this.shadow.y = this.y + 20;\r\n  }\r\n\r\n  /*\r\n    This function adds an animation to the foe.\r\n    */\r\n  init() {\r\n    this.scene.anims.create({\r\n      key: this.name,\r\n      frames: this.scene.anims.generateFrameNumbers(this.name),\r\n      frameRate: 10,\r\n      repeat: -1,\r\n    });\r\n    this.anims.play(this.name, true);\r\n    this.direction = -1;\r\n  }\r\n\r\n  /*\r\n    This function is called from the foe generation. It updates the foe position, checks if it's out of bounds and also updates its shadow.\r\n    */\r\n  override update() {\r\n    if (this.y > this.scene.height + 64) {\r\n      if (this.name !== \"foe2\") this.shadow?.destroy();\r\n      this.destroy();\r\n    }\r\n\r\n    if (this.name === \"guinxu\" && Phaser.Math.Between(1, 6) > 5) {\r\n      this.guinxuShot();\r\n    } else if (Phaser.Math.Between(1, 101) > 100) {\r\n      if (!this.scene || !this.scene.player) return;\r\n      this.scene.playAudio(\"foeshot\");\r\n      let shot = new FoeShot(this.scene, this.x, this.y, \"foe\", this.name);\r\n      this.scene.foeShots.add(shot);\r\n      this.scene.physics.moveTo(\r\n        shot,\r\n        this.scene.player.x,\r\n        this.scene.player.y,\r\n        300\r\n      );\r\n      this.scene.physics.moveTo(\r\n        shot.shadow,\r\n        this.scene.player.x,\r\n        this.scene.player.y,\r\n        300\r\n      );\r\n    }\r\n\r\n    if (this.name !== \"foe2\") {\r\n      this.updateShadow();\r\n    }\r\n  }\r\n\r\n  /*\r\n    This takes care of the shots generated by the final boss.\r\n    */\r\n  guinxuShot() {\r\n    if (!this.scene || !this.scene.player) return;\r\n\r\n    this.scene.playAudio(\"foeshot\");\r\n    const shot = new FoeShot(\r\n      this.scene,\r\n      this.x,\r\n      this.y,\r\n      \"foe\",\r\n      this.name,\r\n      this.pattern[this.patternIndex],\r\n      300\r\n    );\r\n    this.scene.foeShots.add(shot);\r\n    this.patternIndex =\r\n      this.patternIndex + 1 === this.pattern.length ? 0 : ++this.patternIndex;\r\n  }\r\n\r\n  /*\r\n    This function is called when the foe is destroyed, adding an explosion effect along with a tween and showing the points.\r\n    */\r\n  dead() {\r\n    let radius = 60;\r\n    let explosionRad = 20;\r\n    if (this.name === \"guinxu\") {\r\n      radius = 220;\r\n      explosionRad = 220;\r\n      this.scene.cameras.main.shake(500);\r\n    }\r\n\r\n    const explosion = this.scene.add\r\n      .circle(this.x, this.y, 5)\r\n      .setStrokeStyle(20, 0xffffff);\r\n    this.showPoints(this.points);\r\n    this.scene.tweens.add({\r\n      targets: explosion,\r\n      radius: { from: 10, to: radius },\r\n      alpha: { from: 1, to: 0.3 },\r\n      duration: 250,\r\n      onComplete: () => {\r\n        explosion.destroy();\r\n      },\r\n    });\r\n\r\n    new Explosion(this.scene, this.x, this.y, explosionRad);\r\n    if (\r\n      this.name !== \"foe2\" &&\r\n      this.scene &&\r\n      this.scene.scene.isActive() &&\r\n      this.shadow &&\r\n      this.shadow.active\r\n    )\r\n      this.shadow.destroy();\r\n\r\n    if (this.name === \"guinxu\") {\r\n      this.scene.number = 5;\r\n      this.scene.playAudio(\"explosion\");\r\n      this.scene.endScene();\r\n    }\r\n    this.destroy();\r\n  }\r\n\r\n  /*\r\n    As we do when destroying shots, this function shows the points when a foe is destroyed with a simple tween effect.\r\n    */\r\n  showPoints(score: number, color = 0xff0000) {\r\n    let text = this.scene.add\r\n      .bitmapText(this.x + 20, this.y - 30, \"wendy\", \"+\" + score, 40, color)\r\n      .setOrigin(0.5);\r\n    this.scene.tweens.add({\r\n      targets: text,\r\n      duration: 800,\r\n      alpha: { from: 1, to: 0 },\r\n      y: { from: this.y - 20, to: this.y - 80 },\r\n      onComplete: () => {\r\n        text.destroy();\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default Foe;", "import Game from \"../scenes/game.ts\";\r\nimport Foe from \"./foe.ts\";\r\n\r\nexport default class FoeGenerator {\r\n  scene: Game;\r\n  waveFoes: never[];\r\n  activeWave: boolean;\r\n  waves: number;\r\n  generateEvent1!: Phaser.Time.TimerEvent;\r\n  generateEvent2!: Phaser.Time.TimerEvent;\r\n  generateEvent3!: Phaser.Time.TimerEvent;\r\n  generateEvent4!: Phaser.Time.TimerEvent;\r\n  laughterEvent!: Phaser.Time.TimerEvent;\r\n  path!: Phaser.Curves.Path;\r\n  graphics!: Phaser.GameObjects.Graphics;\r\n\r\n  constructor(scene: Game) {\r\n    this.scene = scene;\r\n    this.waveFoes = [];\r\n    this.generate();\r\n    this.activeWave = false;\r\n    this.waves = 0;\r\n  }\r\n\r\n  /*\r\n    This is the main function to generate foes. Depending on the scene number, it will generate different foes.\r\n    */\r\n  generate() {\r\n    if (this.scene.number === 4) {\r\n      this.scene.time.delayedCall(\r\n        2000,\r\n        () => this.releaseGuinxu(),\r\n        undefined,\r\n        this\r\n      );\r\n    } else {\r\n      this.generateEvent1 = this.scene.time.addEvent({\r\n        delay: 7000,\r\n        callback: () => this.orderedWave(),\r\n        callbackScope: this,\r\n        loop: true,\r\n      });\r\n      this.generateEvent2 = this.scene.time.addEvent({\r\n        delay: 15000,\r\n        callback: () => this.wave(),\r\n        callbackScope: this,\r\n        loop: true,\r\n      });\r\n      if (this.scene.number > 1)\r\n        this.generateEvent3 = this.scene.time.addEvent({\r\n          delay: 3000,\r\n          callback: () => this.tank(),\r\n          callbackScope: this,\r\n          loop: true,\r\n        });\r\n      if (this.scene.number > 2)\r\n        this.generateEvent4 = this.scene.time.addEvent({\r\n          delay: 5000,\r\n          callback: () => this.slider(),\r\n          callbackScope: this,\r\n          loop: true,\r\n        });\r\n    }\r\n  }\r\n\r\n  /*\r\n  This is the function that generates the boss.\r\n  */\r\n  releaseGuinxu() {\r\n    const guinxu = new Foe(\r\n      this.scene,\r\n      Phaser.Math.Between(200, 600),\r\n      200,\r\n      \"guinxu\",\r\n      0,\r\n      20\r\n    );\r\n    this.scene.playAudio(\"boss\");\r\n    this.laughterEvent = this.scene.time.addEvent({\r\n      delay: 10000,\r\n      callback: () => {\r\n        this.scene.playAudio(\"boss\");\r\n      },\r\n      callbackScope: this,\r\n      loop: true,\r\n    });\r\n    this.scene.tweens.add({\r\n      targets: guinxu,\r\n      alpha: { from: 0.3, to: 1 },\r\n      duration: 200,\r\n      repeat: 10,\r\n    });\r\n    this.scene.foeGroup.add(guinxu);\r\n  }\r\n\r\n  /*\r\n  This is the function that stops the generation of foes.\r\n  */\r\n  stop() {\r\n    this.scene.foeGroup.children.forEach((foe) => {\r\n      if (foe === null || !foe.active) return;\r\n      foe.destroy();\r\n    });\r\n  }\r\n\r\n  /*\r\n  This is called when the scene is finished and it takes care of destroying the generation events.\r\n  */\r\n  finishScene() {\r\n    this.generateEvent1.destroy();\r\n    this.generateEvent2.destroy();\r\n    if (this.scene.number > 1) this.generateEvent3.destroy();\r\n    if (this.scene.number > 2) this.generateEvent4.destroy();\r\n    this.scene.endScene();\r\n  }\r\n\r\n  /*\r\n  This is the function that creates the path for the foes to follow in formation.\r\n  */\r\n  createPath() {\r\n    this.waves++;\r\n    if (this.waves === 3) this.finishScene();\r\n    const start = Phaser.Math.Between(100, 600);\r\n    this.path = new Phaser.Curves.Path(start, 0);\r\n\r\n    this.path.lineTo(start, Phaser.Math.Between(20, 50));\r\n\r\n    const max = 8;\r\n    const h = 500 / max;\r\n\r\n    for (let i = 0; i < max; i++) {\r\n      if (i % 2 === 0) {\r\n        this.path.lineTo(start, 50 + h * (i + 1));\r\n      } else {\r\n        this.path.lineTo(start + 300, 50 + h * (i + 1));\r\n      }\r\n    }\r\n\r\n    this.path.lineTo(start, this.scene.height + 50);\r\n    this.graphics = this.scene.add.graphics();\r\n    this.graphics.lineStyle(0, 0xffffff, 0); // for debug\r\n  }\r\n\r\n  /*\r\n  This is the function that generates a wave of foes in an ordered formation.\r\n  */\r\n  orderedWave(difficulty = 5) {\r\n    const x = Phaser.Math.Between(64, this.scene.width - 200);\r\n    const y = Phaser.Math.Between(-100, 0);\r\n    const minus = Phaser.Math.Between(-1, 1) > 0 ? 1 : -1;\r\n\r\n    Array(difficulty)\r\n      .fill(null)\r\n      .forEach((_, i) => this.addOrder(i, x, y, minus));\r\n  }\r\n\r\n  /*\r\n  This function just creates a simple wave of foes.\r\n  */\r\n  wave(difficulty = 5) {\r\n    this.createPath();\r\n    Array(difficulty)\r\n      .fill(null)\r\n      .forEach((_, i) => this.addToWave(i));\r\n    this.activeWave = true;\r\n  }\r\n\r\n  /*\r\n  This function generates a single tank foe.\r\n  */\r\n  tank() {\r\n    this.scene.foeGroup.add(\r\n      new Foe(this.scene, Phaser.Math.Between(100, 600), -100, \"foe2\", 0, 620)\r\n    );\r\n  }\r\n\r\n  /*\r\n  This generates a slider foe and adds a rotation tween to it.\r\n  */\r\n  slider() {\r\n    let velocity = -200;\r\n    let x = 0;\r\n    if (Phaser.Math.Between(-1, 1) > 0) {\r\n      velocity = 200;\r\n      x = -100;\r\n    } else {\r\n      x = this.scene.width + 100;\r\n    }\r\n    const foe = new Foe(\r\n      this.scene,\r\n      x,\r\n      Phaser.Math.Between(100, 600),\r\n      \"foe1\",\r\n      velocity,\r\n      0\r\n    );\r\n    this.scene.tweens.add({\r\n      targets: [foe, foe.shadow],\r\n      duration: 500,\r\n      rotation: \"+=5\",\r\n      repeat: -1,\r\n    });\r\n    this.scene.foeGroup.add(foe);\r\n  }\r\n\r\n  /*\r\n  This function adds a foe to the scene, in a random position.\r\n  */\r\n  add() {\r\n    const foe = new Foe(\r\n      this.scene,\r\n      Phaser.Math.Between(32, this.scene.width - 32),\r\n      0\r\n    );\r\n    this.scene.foeGroup.add(foe);\r\n  }\r\n\r\n  /*\r\n  This function generates and ordered group of foes.\r\n  */\r\n  addOrder(i: number, x: number, y: number, minus: number) {\r\n    const offset = minus * 70;\r\n\r\n    this.scene.foeGroup.add(\r\n      new Foe(this.scene, x + i * 70, i * y + offset, \"foe0\", 0, 300)\r\n    );\r\n  }\r\n\r\n  /*\r\n  This function adds a foe to the wave.\r\n  */\r\n  addToWave(i: number) {\r\n    const foe = new Foe(\r\n      this.scene,\r\n      Phaser.Math.Between(32, this.scene.width - 32),\r\n      0,\r\n      \"foe0\"\r\n    );\r\n    this.scene.tweens.add({\r\n      targets: foe,\r\n      z: 1,\r\n      ease: \"Linear\",\r\n      duration: 12000,\r\n      repeat: -1,\r\n      delay: i * 100,\r\n    });\r\n    this;\r\n    this.scene.foeWaveGroup.add(foe);\r\n  }\r\n\r\n  /*\r\n  This function updates all foes in the scene. This could be done independently in each foe as we will see in other projects.\r\n  */\r\n  update() {\r\n    if (this.path) {\r\n      this.path.draw(this.graphics);\r\n\r\n      this.scene.foeWaveGroup.children.forEach((foe) => {\r\n        if (foe === null || !foe.active || !(foe instanceof Foe)) return;\r\n        let t = foe.z;\r\n        let vec = foe.getData(\"vector\");\r\n        this.path.getPoint(t, vec);\r\n        foe.setPosition(vec.x, vec.y);\r\n        foe.shadow?.setPosition(vec.x + 20, vec.y + 20);\r\n        foe.setDepth(foe.y);\r\n      });\r\n\r\n      if (this.activeWave && this.checkIfWaveDestroyed()) {\r\n        this.activeWave = false;\r\n        this.scene.spawnShake();\r\n        this.path.destroy();\r\n      }\r\n    }\r\n\r\n    this.scene.foeGroup.children.entries().forEach((foe) => {\r\n      if (!(foe instanceof Foe)) return;\r\n      if (foe === null || !foe.active || foe.y > this.scene.height + 100)\r\n        foe.destroy();\r\n      foe.update();\r\n    });\r\n  }\r\n\r\n  /*\r\n  This function checks if the wave of foes has been destroyed so we can generate a power-up.\r\n  */\r\n  checkIfWaveDestroyed() {\r\n    const foes = [...this.scene.foeWaveGroup.children];\r\n\r\n    return foes.length === foes.filter((foe) => !foe.active).length;\r\n  }\r\n}", "export class LightParticle extends Phaser.GameObjects.PointLight {\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n  constructor(\r\n    scene: Phaser.Scene,\r\n    x: number,\r\n    y: number,\r\n    color = 0xffffff,\r\n    radius = 5,\r\n    intensity = 0.5\r\n  ) {\r\n    super(scene, x, y, color, radius, intensity);\r\n    this.name = \"celtic\";\r\n    this.scene = scene;\r\n    scene.add.existing(this);\r\n    scene.physics.add.existing(this);\r\n    this.body.setAllowGravity(false);\r\n    this.body.setVelocityY(300);\r\n    this.init();\r\n  }\r\n\r\n  /*\r\n    We add a tween to the particle to make it grow and fade out.\r\n    */\r\n  init() {\r\n    this.scene.tweens.add({\r\n      targets: this,\r\n      duration: Phaser.Math.Between(600, 1000),\r\n      scale: { from: 1, to: 3 },\r\n      alpha: { from: this.alpha, to: 0 },\r\n      onComplete: () => {\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n}", "import { PlayerName } from \"../scenes/game.ts\";\r\n\r\nconst TYPES = {\r\n  chocolate: { color: 0xaf8057, radius: 16, intensity: 0.4 },\r\n  vanila: { color: 0xfff6d5, radius: 16, intensity: 0.4 },\r\n  fruit: { color: 0xffffff, radius: 16, intensity: 0.4 },\r\n  water: { color: 0xffffff, radius: 16, intensity: 0.4 },\r\n  foe: { color: 0x00ff00, radius: 16, intensity: 0.4 },\r\n} as const;\r\n\r\nclass Shot extends Phaser.GameObjects.PointLight {\r\n  playerName: PlayerName;\r\n  shadow!: Phaser.GameObjects.Arc & { body: Phaser.Physics.Arcade.Body };\r\n\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n\r\n  constructor(\r\n    scene: Phaser.Scene,\r\n    x: number,\r\n    y: number,\r\n    type: keyof typeof TYPES = \"water\",\r\n    playerName: PlayerName,\r\n    velocityX = 0,\r\n    velocityY = -500\r\n  ) {\r\n    const { color, radius, intensity } = TYPES[type];\r\n    super(scene, x, y, color, radius, intensity);\r\n    this.name = \"shot\";\r\n    this.playerName = playerName;\r\n    scene.add.existing(this);\r\n    scene.physics.add.existing(this);\r\n    this.body.setAllowGravity(false);\r\n    this.body.setVelocityX(velocityX);\r\n    this.body.setVelocityY(velocityY);\r\n    this.body.setCircle(10);\r\n    this.body.setOffset(6, 9);\r\n    this.body.setCollideWorldBounds(true);\r\n    this.body.onWorldBounds = true;\r\n    this.spawnShadow(x, y, velocityX, velocityY);\r\n    this.init();\r\n  }\r\n\r\n  /*\r\n   Each shot will have a shadow, which will be a circle with a lower alpha value.\r\n    */\r\n  spawnShadow(x: number, y: number, velocityX: number, velocityY: number) {\r\n    /**\r\n     * Typescript addition: I would love to do this better. I hate type\r\n     * assertions! However, it's better to do one assertion here on creation\r\n     * rather than every time we use it.\r\n     */\r\n    this.shadow = this.scene.add\r\n      .circle(x + 20, y + 20, 10, 0x000000)\r\n      .setAlpha(0.4) as typeof this.shadow;\r\n    this.scene.add.existing(this.shadow);\r\n    this.scene.physics.add.existing(this.shadow);\r\n    this.shadow.body.setVelocityX(velocityX);\r\n    this.shadow.body.setVelocityY(velocityY);\r\n  }\r\n\r\n  /*\r\n    We add a tween to the shot to make it grow and fade out, repeatedly.\r\n    */\r\n  init() {\r\n    this.scene.tweens.add({\r\n      targets: this,\r\n      duration: 200,\r\n      intensity: { from: 0.3, to: 0.7 },\r\n      repeat: -1,\r\n    });\r\n  }\r\n}\r\n\r\nexport default Shot;", "import Game, { PlayerName } from \"../scenes/game.ts\";\r\nimport Shot from \"./shot.ts\";\r\n\r\nexport type ShootingPatternType = \"water\" | \"fruit\" | \"vanila\" | \"chocolate\";\r\n\r\ntype ShootingMethods = Record<\r\n  ShootingPatternType,\r\n  (x: number, y: number, powerUp: ShootingPatternType) => void\r\n>;\r\n\r\nexport default class ShootingPatterns {\r\n  scene: Game;\r\n  name: PlayerName;\r\n  shootingMethods: ShootingMethods;\r\n\r\n  constructor(scene: Game, name: PlayerName) {\r\n    this.scene = scene;\r\n    this.name = name;\r\n    this.shootingMethods = {\r\n      water: this.single.bind(this),\r\n      fruit: this.tri.bind(this),\r\n      vanila: this.quintus.bind(this),\r\n      chocolate: this.massacre.bind(this),\r\n    };\r\n  }\r\n\r\n  /*\r\n    These are the different functions we will use to shoot. Each one will shoot a different number of shots, with different angles and speeds.\r\n    The patterns are applied depending on the current power-up.\r\n    */\r\n  shoot(x: number, y: number, powerUp: ShootingPatternType) {\r\n    this.shootingMethods[powerUp](x, y, powerUp);\r\n  }\r\n\r\n  single(x: number, y: number, powerUp: ShootingPatternType) {\r\n    this.scene.shots.add(new Shot(this.scene, x, y, powerUp, this.name));\r\n  }\r\n\r\n  tri(x: number, y: number, powerUp: ShootingPatternType) {\r\n    this.scene.shots.add(new Shot(this.scene, x, y, powerUp, this.name, -60));\r\n    this.scene.shots.add(new Shot(this.scene, x, y, powerUp, this.name));\r\n    this.scene.shots.add(new Shot(this.scene, x, y, powerUp, this.name, 60));\r\n  }\r\n\r\n  quintus(x: number, y: number, powerUp: ShootingPatternType) {\r\n    this.scene.shots.add(new Shot(this.scene, x, y, powerUp, this.name, -300));\r\n    this.scene.shots.add(new Shot(this.scene, x, y, powerUp, this.name, 300));\r\n    this.scene.shots.add(\r\n      new Shot(this.scene, x, y, powerUp, this.name, -300, 500)\r\n    );\r\n    this.scene.shots.add(\r\n      new Shot(this.scene, x, y, powerUp, this.name, 300, 500)\r\n    );\r\n  }\r\n\r\n  massacre(x: number, y: number, powerUp: ShootingPatternType) {\r\n    this.scene.shots.add(\r\n      new Shot(this.scene, x, y, powerUp, this.name, 300, 0)\r\n    );\r\n    this.scene.shots.add(\r\n      new Shot(this.scene, x, y, powerUp, this.name, -300, 0)\r\n    );\r\n    this.scene.shots.add(\r\n      new Shot(this.scene, x, y, powerUp, this.name, 0, 500)\r\n    );\r\n    this.scene.shots.add(new Shot(this.scene, x, y, powerUp, this.name, 30));\r\n    this.scene.shots.add(new Shot(this.scene, x, y, powerUp, this.name, 60));\r\n  }\r\n}", "import Game, { PlayerName } from \"../scenes/game.ts\";\r\nimport Explosion from \"./explosion.ts\";\r\nimport { LightParticle } from \"./particle.ts\";\r\nimport ShootingPatterns, { ShootingPatternType } from \"./shooting_patterns.ts\";\r\n\r\nclass Player extends Phaser.GameObjects.Sprite {\r\n  powerUp: ShootingPatternType;\r\n  id: number;\r\n  power: number;\r\n  blinking: boolean;\r\n  shootingPatterns: ShootingPatterns;\r\n  shadow!: Phaser.GameObjects.Image;\r\n  upDelta!: number;\r\n  SPACE!: Phaser.Input.Keyboard.Key;\r\n  cursor!: Phaser.Types.Input.Keyboard.CursorKeys;\r\n  W!: Phaser.Input.Keyboard.Key;\r\n  A!: Phaser.Input.Keyboard.Key;\r\n  S!: Phaser.Input.Keyboard.Key;\r\n  D!: Phaser.Input.Keyboard.Key;\r\n  death: any;\r\n\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n  declare scene: Game;\r\n  declare name: PlayerName;\r\n\r\n  constructor(\r\n    scene: Game,\r\n    x: number,\r\n    y: number,\r\n    name: PlayerName = \"player1\",\r\n    powerUp: ShootingPatternType = \"water\"\r\n  ) {\r\n    super(scene, x, y, name);\r\n    this.name = name;\r\n    this.spawnShadow(x, y);\r\n    this.powerUp = powerUp;\r\n    this.id = Math.random();\r\n    scene.add.existing(this);\r\n    scene.physics.add.existing(this);\r\n    this.body.setCollideWorldBounds(true);\r\n    this.body.setAllowGravity(false);\r\n    this.body.setCircle(26);\r\n    this.body.setOffset(6, 9);\r\n    this.power = 0;\r\n    this.blinking = false;\r\n    this.shootingPatterns = new ShootingPatterns(this.scene, this.name);\r\n    this.init();\r\n    this.setControls();\r\n  }\r\n\r\n  /*\r\n    We add a shadow to the player, and we'll have to update its position with the player. Alternatively, we could have defined a Container with the player and the shadow.\r\n    */\r\n  spawnShadow(x: number, y: number) {\r\n    this.shadow = this.scene.add\r\n      .image(x + 20, y + 20, \"player1\")\r\n      .setTint(0x000000)\r\n      .setAlpha(0.4);\r\n  }\r\n\r\n  /*\r\n    We set the animations for the player. We'll have 3 animations: one for the idle state, one for moving right, and one for moving left.\r\n    */\r\n  init() {\r\n    this.scene.anims.create({\r\n      key: this.name,\r\n      frames: this.scene.anims.generateFrameNumbers(this.name, {\r\n        start: 0,\r\n        end: 0,\r\n      }),\r\n      frameRate: 10,\r\n      repeat: -1,\r\n    });\r\n    this.scene.anims.create({\r\n      key: this.name + \"right\",\r\n      frames: this.scene.anims.generateFrameNumbers(this.name, {\r\n        start: 1,\r\n        end: 1,\r\n      }),\r\n      frameRate: 10,\r\n      repeat: -1,\r\n    });\r\n    this.scene.anims.create({\r\n      key: this.name + \"left\",\r\n      frames: this.scene.anims.generateFrameNumbers(this.name, {\r\n        start: 2,\r\n        end: 2,\r\n      }),\r\n      frameRate: 10,\r\n      repeat: -1,\r\n    });\r\n    this.anims.play(this.name, true);\r\n\r\n    this.upDelta = 0;\r\n  }\r\n\r\n  /*\r\n    We set the controls for the player. We'll use the cursor keys and WASD keys to move the player, and the space bar to shoot.\r\n    */\r\n  setControls() {\r\n    if (!this.scene.input.keyboard) throw Error(\"Must have a keyboard to play\");\r\n\r\n    this.SPACE = this.scene.input.keyboard.addKey(\r\n      Phaser.Input.Keyboard.KeyCodes.SPACE\r\n    );\r\n    this.cursor = this.scene.input.keyboard.createCursorKeys();\r\n    this.W = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\r\n    this.A = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\r\n    this.S = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\r\n    this.D = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\r\n  }\r\n\r\n  /*\r\n    This will be called when the player shoots. We'll play a sound, and then call the shoot method of the current shooting pattern.\r\n    */\r\n  shoot() {\r\n    this.scene.playAudio(\"shot\");\r\n    this.shootingPatterns.shoot(this.x, this.y, this.powerUp);\r\n  }\r\n\r\n  /*\r\n    This is the game loop for the player. We'll check if the player is moving, and if so, we'll play the corresponding animation. We'll also check if the player is shooting, and if so, we'll call the shoot method.\r\n    */\r\n  override update() {\r\n    if (this.death) return;\r\n    if (this.cursor.left.isDown) {\r\n      this.x -= 5;\r\n      this.anims.play(this.name + \"left\", true);\r\n      this.shadow.setScale(0.5, 1);\r\n    } else if (this.cursor.right.isDown) {\r\n      this.x += 5;\r\n      this.anims.play(this.name + \"right\", true);\r\n      this.shadow.setScale(0.5, 1);\r\n    } else {\r\n      this.anims.play(this.name, true);\r\n      this.shadow.setScale(1, 1);\r\n    }\r\n\r\n    if (this.cursor.up.isDown) {\r\n      this.y -= 5;\r\n    } else if (this.cursor.down.isDown) {\r\n      this.y += 5;\r\n    }\r\n\r\n    if (Phaser.Input.Keyboard.JustDown(this.SPACE)) {\r\n      this.shoot();\r\n    }\r\n    this.scene.trailLayer.add(\r\n      new LightParticle(this.scene, this.x, this.y, 0xffffff, 10)\r\n    );\r\n    this.updateShadow();\r\n  }\r\n\r\n  /*\r\n    We update the shadow position to follow the player.\r\n    */\r\n  updateShadow() {\r\n    this.shadow.x = this.x + 20;\r\n    this.shadow.y = this.y + 20;\r\n  }\r\n\r\n  /*\r\n    Every time the player destroys a foe or a shot we show the points. We'll use a bitmap text for that.\r\n    */\r\n  showPoints(score: number, color = 0xff0000) {\r\n    let text = this.scene.add\r\n      .bitmapText(\r\n        this.x + 20,\r\n        this.y - 30,\r\n        \"starshipped\",\r\n        score.toString(),\r\n        20,\r\n        0xfffd37\r\n      )\r\n      .setOrigin(0.5);\r\n    this.scene.tweens.add({\r\n      targets: text,\r\n      duration: 2000,\r\n      alpha: { from: 1, to: 0 },\r\n      y: { from: text.y - 10, to: text.y - 100 },\r\n    });\r\n  }\r\n\r\n  /*\r\n    This will be called when the player dies: we'll show an explosion, shake the camera, and destroy the player.\r\n    */\r\n  dead() {\r\n    const explosion = this.scene.add\r\n      .circle(this.x, this.y, 10)\r\n      .setStrokeStyle(40, 0xffffff);\r\n    this.scene.tweens.add({\r\n      targets: explosion,\r\n      radius: { from: 10, to: 512 },\r\n      alpha: { from: 1, to: 0.3 },\r\n      duration: 300,\r\n      onComplete: () => {\r\n        explosion.destroy();\r\n      },\r\n    });\r\n    this.scene.cameras.main.shake(500);\r\n    this.death = true;\r\n    this.shadow.destroy();\r\n    new Explosion(this.scene, this.x, this.y, 40);\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default Player;", "import { ShootingPatternType } from \"./shooting_patterns.ts\";\r\n\r\nclass PowerUp extends Phaser.GameObjects.Sprite {\r\n  power: ShootingPatternType;\r\n  id: number;\r\n  shadow!: Phaser.GameObjects.Image & { body: Phaser.Physics.Arcade.Body };\r\n  direction!: number;\r\n\r\n  declare body: Phaser.Physics.Arcade.Body;\r\n\r\n  constructor(\r\n    scene: Phaser.Scene,\r\n    x: number,\r\n    y: number,\r\n    name = \"plenny0\",\r\n    power: ShootingPatternType = \"fruit\"\r\n  ) {\r\n    super(scene, x, y, name);\r\n    this.name = name;\r\n    this.power = power;\r\n    this.scene = scene;\r\n    this.id = Math.random();\r\n    this.spawnShadow(x, y);\r\n    scene.add.existing(this);\r\n    scene.physics.add.existing(this);\r\n    this.body.setAllowGravity(false);\r\n    this.body.setCircle(19);\r\n    this.body.setOffset(12, 12);\r\n    this.body.setVelocityX(-100);\r\n    this.init();\r\n  }\r\n\r\n  /*\r\n   The power-up also spawns a shadow.\r\n    */\r\n  spawnShadow(x: number, y: number) {\r\n    /**\r\n     * Typescript addition: I would love to do this better. I hate type\r\n     * assertions! However, it's better to do one assertion here on creation\r\n     * rather than every time we use it.\r\n     */\r\n    this.shadow = this.scene.add\r\n      .image(x + 20, y + 20, \"plenny0\")\r\n      .setTint(0x000000)\r\n      .setAlpha(0.4) as typeof this.shadow;\r\n\r\n    this.scene.physics.add.existing(this.shadow);\r\n    this.shadow.body.setVelocityX(-100);\r\n  }\r\n\r\n  /*\r\n    This sets the animation and movement of the power-up.\r\n    */\r\n  init() {\r\n    this.scene.anims.create({\r\n      key: this.name,\r\n      frames: this.scene.anims.generateFrameNumbers(this.name),\r\n      frameRate: 10,\r\n      repeat: -1,\r\n    });\r\n\r\n    this.scene.tweens.add({\r\n      targets: [this],\r\n      duration: 5000,\r\n      x: { from: this.x, to: 0 },\r\n      y: { from: this.y - 10, to: this.y + 10 },\r\n      scale: { from: 0.8, to: 1 },\r\n      repeat: -1,\r\n      yoyo: true,\r\n    });\r\n\r\n    this.scene.tweens.add({\r\n      targets: this.shadow,\r\n      duration: 5000,\r\n      x: { from: this.shadow.x, to: 0 },\r\n      y: { from: this.shadow.y - 10, to: this.y + 10 },\r\n      scale: { from: 0.8, to: 1 },\r\n      repeat: -1,\r\n      yoyo: true,\r\n    });\r\n\r\n    this.anims.play(this.name, true);\r\n    this.body.setVelocityX(-100);\r\n    this.shadow.body.setVelocityX(-100);\r\n    this.direction = -1;\r\n  }\r\n\r\n  /*\r\n    When this element is destroyed, it will also destroy the shadow.\r\n    */\r\n  override destroy() {\r\n    this.shadow.destroy();\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default PowerUp;", "import Game from \"../scenes/game.ts\";\r\nimport Splash from \"../scenes/splash.ts\";\r\n\r\nexport default class SceneEffect {\r\n  scene: Splash | Game;\r\n\r\n  constructor(scene: Splash | Game) {\r\n    this.scene = scene;\r\n  }\r\n\r\n  /*\r\n   This adds a rectangle to the scene, and then we tween it to make it move from the left to the right.\r\n    */\r\n  simpleClose(callback: () => void) {\r\n    const rectangleWidth = this.scene.width / 2;\r\n    const rectangle1 = this.scene.add\r\n      .rectangle(\r\n        0 - rectangleWidth,\r\n        0,\r\n        this.scene.width,\r\n        this.scene.height,\r\n        0x000000\r\n      )\r\n      .setOrigin(0.5, 0);\r\n\r\n    this.scene.tweens.add({\r\n      targets: rectangle1,\r\n      duration: 500,\r\n      x: { from: -rectangleWidth / 2, to: rectangleWidth },\r\n      onComplete: () => {\r\n        callback();\r\n      },\r\n    });\r\n  }\r\n\r\n  /*\r\n    This adds a rectangle to the scene, and then we tween it to make it move from the right to the left.\r\n    */\r\n  simpleOpen(callback: () => void) {\r\n    const rectangleWidth = this.scene.width / 2;\r\n    const rectangle1 = this.scene.add\r\n      .rectangle(\r\n        rectangleWidth,\r\n        0,\r\n        this.scene.width,\r\n        this.scene.height,\r\n        0x000000\r\n      )\r\n      .setOrigin(0.5, 0);\r\n\r\n    this.scene.tweens.add({\r\n      targets: rectangle1,\r\n      duration: 500,\r\n      x: { from: rectangleWidth, to: -rectangleWidth },\r\n      onComplete: () => {\r\n        callback();\r\n      },\r\n    });\r\n  }\r\n\r\n  /*\r\n    This adds two rectangles to the scene, and then we tween them to make them move from the center to the left and right.\r\n    */\r\n  close(callback: () => void) {\r\n    const rectangleWidth = this.scene.width / 2;\r\n    const rectangle1 = this.scene.add\r\n      .rectangle(\r\n        0 - rectangleWidth,\r\n        0,\r\n        this.scene.width / 2,\r\n        this.scene.height,\r\n        0x000000\r\n      )\r\n      .setOrigin(0.5, 0);\r\n    const rectangle2 = this.scene.add\r\n      .rectangle(\r\n        this.scene.width,\r\n        0,\r\n        this.scene.width / 2,\r\n        this.scene.height,\r\n        0x000000\r\n      )\r\n      .setOrigin(0, 0);\r\n    this.scene.tweens.add(\r\n      {\r\n        targets: rectangle1,\r\n        duration: 1000,\r\n        x: { from: -rectangleWidth / 2, to: rectangleWidth / 2 },\r\n      }\r\n      /**\r\n       * Typescript Additions: You cannot provide more than one tween to the scene.tweens.add method.\r\n       */\r\n      // {\r\n      //   targets: rectangle2,\r\n      //   duration: 1000,\r\n      //   x: { from: this.scene.width, to: rectangleWidth },\r\n      //   onComplete: () => {\r\n      //     callback();\r\n      //   },\r\n      // }\r\n    );\r\n  }\r\n}", "import Foe from \"../gameobjects/foe.ts\";\r\nimport FoeGenerator from \"../gameobjects/foe_generator.ts\";\r\nimport FoeShot from \"../gameobjects/foe_shot.ts\";\r\nimport Player from \"../gameobjects/player.ts\";\r\nimport PowerUp from \"../gameobjects/powerup.ts\";\r\nimport SceneEffect from \"../gameobjects/scene_effect.ts\";\r\nimport { ShootingPatternType } from \"../gameobjects/shooting_patterns.ts\";\r\nimport Shot from \"../gameobjects/shot.ts\";\r\n\r\nconst isShot = (\r\n  gameObject: Phaser.GameObjects.GameObject\r\n): gameObject is Shot | FoeShot =>\r\n  [\"shot\", \"foeShot\"].includes(gameObject.name);\r\n\r\ntype Score = {\r\n  scoreText: Phaser.GameObjects.BitmapText;\r\n};\r\n\r\ntype Sound =\r\n  | Phaser.Sound.NoAudioSound\r\n  | Phaser.Sound.HTML5AudioSound\r\n  | Phaser.Sound.WebAudioSound;\r\n\r\nexport type PlayerName = \"player1\" | \"player2\";\r\n\r\nexport default class Game extends Phaser.Scene {\r\n  player: Player | null;\r\n  score: number;\r\n  scoreText: null;\r\n  name: any;\r\n  number: any;\r\n  next: any;\r\n  currentPowerUp!: number;\r\n  width!: number;\r\n  height!: number;\r\n  center_width!: number;\r\n  center_height!: number;\r\n  background!: Phaser.GameObjects.TileSprite;\r\n  lastDestroyedWaveFoe!: { x: any; y: any };\r\n  shake!: PowerUp;\r\n  powerUps: any;\r\n  scores!: Record<PlayerName, Score>;\r\n  trailLayer!: Phaser.GameObjects.Layer;\r\n  players!: Phaser.GameObjects.Group;\r\n  shotsLayer!: Phaser.GameObjects.Layer;\r\n  shots!: Phaser.GameObjects.Group;\r\n  foeGroup!: Phaser.GameObjects.Group;\r\n  foeWaveGroup!: Phaser.GameObjects.Group;\r\n  foeShots!: Phaser.GameObjects.Group;\r\n  foes!: FoeGenerator;\r\n  available!: ShootingPatternType[];\r\n  audios!: {\r\n    shot: Sound;\r\n    foeshot: Sound;\r\n    explosion: Sound;\r\n    foexplosion: Sound;\r\n    foedestroy: Sound;\r\n    stageclear1: Sound;\r\n    stageclear2: Sound;\r\n    boss: Sound;\r\n  };\r\n\r\n  constructor() {\r\n    super({ key: \"game\" });\r\n    this.player = null;\r\n    this.score = 0;\r\n    this.scoreText = null;\r\n  }\r\n\r\n  /*\r\n    We need to initialize the scene with the data we passed from the previous scene, especially the number of the stage to load the correct background. Also, we need to get the current power-up from the registry, although we are not applying it yet.\r\n    */\r\n  init(data: { name: string; number: number; next: string }) {\r\n    this.name = data.name;\r\n    this.number = data.number;\r\n    this.next = data.next;\r\n    this.currentPowerUp = +this.registry.get(\"currentPowerUp\");\r\n  }\r\n\r\n  /*\r\n    Here we create and start all the elements of the game. We create the background, the players, the foes, the shots, the power-ups, the scores, the audios and the colliders.\r\n    */\r\n  create() {\r\n    /**\r\n     * Typescript Addition: This appears unused. I'm commenting it out for now.\r\n     */\r\n    // this.duration = this.time * 1000;\r\n    this.width = Number(this.sys.game.config.width);\r\n    this.height = Number(this.sys.game.config.height);\r\n    this.center_width = this.width / 2;\r\n    this.center_height = this.height / 2;\r\n    new SceneEffect(this).simpleOpen(() => 0);\r\n    this.addBackground();\r\n    this.cameras.main.setBackgroundColor(0x333333);\r\n    this.lights.enable();\r\n    this.lights.setAmbientColor(0x666666);\r\n    this.addScores();\r\n    this.addFoes();\r\n    this.addPlayers();\r\n    this.addPowerUps();\r\n    this.addShots();\r\n    this.loadAudios();\r\n    this.addColliders();\r\n  }\r\n\r\n  /*\r\n    This is how we create an infinite background. We create a tileSprite with the size of the screen and we set the origin to 0,0. Then we set the scroll factor to 0,1 so it will scroll only in the Y axis.\r\n    */\r\n  addBackground() {\r\n    this.background = this.add\r\n      .tileSprite(0, 0, this.width, this.height, \"stage\" + this.number)\r\n      .setOrigin(0)\r\n      .setScrollFactor(0, 1);\r\n  }\r\n\r\n  /*\r\n    This is the method that will be called from the foe generator when a wave is destroyed. We create a new power up and we add it to the power-up group.\r\n    */\r\n  spawnShake() {\r\n    const { x, y } = this.lastDestroyedWaveFoe;\r\n    this.shake = new PowerUp(this, x, y);\r\n    this.powerUps.add(this.shake);\r\n  }\r\n\r\n  /*\r\n    This adds the score text to the scene. We create a group of scores, one for each player. We add the score text to the group and we set the scroll factor to 0 so it will not scroll with the camera.\r\n    */\r\n  addScores() {\r\n    this.scores = {\r\n      player1: {\r\n        scoreText: this.add\r\n          .bitmapText(\r\n            150,\r\n            16,\r\n            \"wendy\",\r\n            String(this.registry.get(\"score_player1\")).padStart(6, \"0\"),\r\n            50\r\n          )\r\n          .setOrigin(0.5)\r\n          .setScrollFactor(0),\r\n      },\r\n      player2: {\r\n        scoreText: this.add\r\n          .bitmapText(this.width - 150, 16, \"wendy\", \"0\".padStart(6, \"0\"), 50)\r\n          .setOrigin(0.5)\r\n          .setScrollFactor(0),\r\n      },\r\n    };\r\n  }\r\n\r\n  /*\r\n    This adds the players to the scene. We create a group of players but in this particular implementation, we just add one player.\r\n    */\r\n  addPlayers() {\r\n    this.trailLayer = this.add.layer();\r\n    this.players = this.add.group();\r\n    this.player = new Player(this, this.center_width, this.center_height);\r\n    this.players.add(this.player);\r\n  }\r\n\r\n  /*\r\n    Next, we have some functions to add other groups for the game elements.\r\n    */\r\n  addShots() {\r\n    this.shotsLayer = this.add.layer();\r\n    this.shots = this.add.group();\r\n  }\r\n\r\n  addFoes() {\r\n    this.foeGroup = this.add.group();\r\n    this.foeWaveGroup = this.add.group();\r\n    this.foeShots = this.add.group();\r\n    this.foes = new FoeGenerator(this);\r\n  }\r\n\r\n  addPowerUps() {\r\n    this.available = [\"fruit\", \"vanila\", \"chocolate\"];\r\n    this.powerUps = this.add.group();\r\n  }\r\n\r\n  /*\r\n    Once we have created all groups of elements, we add the colliders between them.\r\n    */\r\n  addColliders() {\r\n    this.physics.add.collider(\r\n      this.players,\r\n      this.foeGroup,\r\n      this.crashFoe as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.physics.add.collider(\r\n      this.players,\r\n      this.foeWaveGroup,\r\n      this.crashFoe as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.physics.add.overlap(\r\n      this.shots,\r\n      this.foeGroup,\r\n      this.destroyFoe as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.physics.add.overlap(\r\n      this.shots,\r\n      this.foeWaveGroup,\r\n      this.destroyWaveFoe as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.physics.add.collider(\r\n      this.players,\r\n      this.powerUps,\r\n      this.pickPowerUp as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.physics.add.overlap(\r\n      this.players,\r\n      this.foeShots,\r\n      this.hitPlayer as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n\r\n    this.physics.add.collider(\r\n      this.shots,\r\n      this.foeShots,\r\n      this.destroyShot as Phaser.Types.Physics.Arcade.ArcadePhysicsCallback,\r\n      () => {\r\n        return true;\r\n      },\r\n      this\r\n    );\r\n    this.physics.world.on(\"worldbounds\", this.onWorldBounds);\r\n  }\r\n\r\n  /*\r\n    This is the callback for the world bounds and we will use it to destroy elements that the game does not need anymore. We check if the element is a shot and if it is, we destroy it. We also destroy the shadow of the shot. We do this because the shadow is not a child of the shot, so it will not be destroyed automatically.\r\n    */\r\n  onWorldBounds(body: Phaser.Physics.Arcade.Body) {\r\n    if (isShot(body.gameObject)) {\r\n      body.gameObject.shadow.destroy();\r\n      body.gameObject.destroy();\r\n    }\r\n  }\r\n\r\n  /*\r\n    This is the callback for the collision between two shots. We destroy both shots and we create an explosion where they meet.\r\n    */\r\n  destroyShot(shot: Shot, foeShot: FoeShot) {\r\n    const point = this.lights.addPointLight(shot.x, shot.y, 0xffffff, 10, 0.7);\r\n    this.tweens.add({\r\n      targets: point,\r\n      duration: 400,\r\n      scale: { from: 1, to: 0 },\r\n    });\r\n    this.playAudio(\"foexplosion\");\r\n    shot.shadow.destroy();\r\n    shot.destroy();\r\n    foeShot.shadow.destroy();\r\n    foeShot.shot();\r\n    this.updateScore(shot.playerName, 50);\r\n  }\r\n\r\n  /*\r\n    This is called when we destroy a foe that is part of a wave.\r\n    */\r\n  destroyWaveFoe(shot: Shot, foe: Foe) {\r\n    this.lastDestroyedWaveFoe = { x: foe.x, y: foe.y };\r\n    this.destroyFoe(shot, foe);\r\n  }\r\n\r\n  /*\r\n  This is the callback we call when a shot hits a foe. We destroy the shot and we decrease the lives of the foe. If the foe has no more lives, we destroy it and we create an explosion. We also add the points to the score of the player who shoots the foe.\r\n    */\r\n  destroyFoe(shot: Shot, foe: Foe) {\r\n    foe.lives--;\r\n    this.playAudio(\"foexplosion\");\r\n    const point = this.lights.addPointLight(shot.x, shot.y, 0xffffff, 10, 0.7);\r\n    this.tweens.add({\r\n      targets: point,\r\n      duration: 400,\r\n      scale: { from: 1, to: 0 },\r\n    });\r\n    this.tweens.add({\r\n      targets: foe,\r\n      duration: 400,\r\n      tint: { from: 0xffffff, to: 0xff0000 },\r\n    });\r\n    this.updateScore(shot.playerName, 50);\r\n    this.tweens.add({ targets: foe, y: \"-=10\", yoyo: true, duration: 100 });\r\n\r\n    shot.destroy();\r\n    if (foe.lives === 0) {\r\n      this.playAudio(\"foedestroy\");\r\n      const point = this.lights.addPointLight(\r\n        shot.x,\r\n        shot.y,\r\n        0xffffff,\r\n        10,\r\n        0.7\r\n      );\r\n      this.tweens.add({\r\n        targets: point,\r\n        duration: 400,\r\n        scale: { from: 1, to: 0 },\r\n      });\r\n      this.updateScore(shot.playerName, foe.points);\r\n      foe.dead();\r\n    }\r\n  }\r\n\r\n  /*\r\n  This one is called when a foe shot hits the player. Unless the player is blinking (because it just started), we destroy the player and we create an explosion. We also destroy the shadow of the shot. Then we respawn the player\r\n    */\r\n  hitPlayer(player: Player, shot: Shot) {\r\n    if (player.blinking) return;\r\n\r\n    if (this.player) this.players.remove(this.player);\r\n    player.dead();\r\n    this.playAudio(\"explosion\");\r\n    shot.shadow.destroy();\r\n    shot.destroy();\r\n    this.time.delayedCall(1000, () => this.respawnPlayer(), undefined, this);\r\n  }\r\n\r\n  /*\r\n    This one is called when a player crashes with a foe. Unless the player is blinking (because it just started), we destroy the player, and the foe and also at the end we respawn the player.\r\n    */\r\n  crashFoe(player: Player, foe: Foe) {\r\n    if (player.blinking) return;\r\n    player.dead();\r\n    this.playAudio(\"explosion\");\r\n    foe.dead();\r\n    this.time.delayedCall(1000, () => this.respawnPlayer(), undefined, this);\r\n  }\r\n\r\n  /*\r\n    This is the callback when the player picks a powerup. We update the power-up of the player and we destroy the power-up. We also create a tween to make the player blink.\r\n    */\r\n  pickPowerUp(player: Player, powerUp: PowerUp) {\r\n    this.playAudio(\"stageclear1\");\r\n    this.updatePowerUp(player, powerUp);\r\n    this.tweens.add({\r\n      targets: player,\r\n      duration: 200,\r\n      alpha: { from: 0.5, to: 1 },\r\n      scale: { from: 1.4, to: 1 },\r\n      repeat: 3,\r\n    });\r\n    powerUp.destroy();\r\n  }\r\n\r\n  /*\r\n    This adds a player to the game. We create a tween to make the player blink and then we create a new player.\r\n    */\r\n  respawnPlayer() {\r\n    this.player = new Player(this, this.center_width, this.center_height);\r\n    this.player.blinking = true;\r\n    this.players.add(this.player);\r\n    this.tweens.add({\r\n      targets: this.player,\r\n      duration: 100,\r\n      alpha: { from: 0, to: 1 },\r\n      repeat: 10,\r\n      onComplete: () => {\r\n        if (this.player) this.player.blinking = false;\r\n      },\r\n    });\r\n  }\r\n\r\n  /*\r\n    Here we load all the audio, and we add them to the `this.audios` object. Later we can play them with the `playAudio` method.\r\n    */\r\n  loadAudios() {\r\n    this.audios = {\r\n      shot: this.sound.add(\"shot\"),\r\n      foeshot: this.sound.add(\"foeshot\"),\r\n      explosion: this.sound.add(\"explosion\"),\r\n      foexplosion: this.sound.add(\"foexplosion\"),\r\n      foedestroy: this.sound.add(\"foedestroy\"),\r\n      stageclear1: this.sound.add(\"stageclear1\"),\r\n      stageclear2: this.sound.add(\"stageclear2\"),\r\n      boss: this.sound.add(\"boss\"),\r\n    };\r\n  }\r\n\r\n  playAudio(key: keyof typeof this.audios) {\r\n    this.audios[key].play();\r\n  }\r\n\r\n  /*\r\n    The game loop is as simple as this. We update the player and the foes. We also update the background to make it scroll.\r\n    */\r\n  override update() {\r\n    if (this.player) this.player?.update();\r\n    this.foes.update();\r\n    this.background.tilePositionY -= 10;\r\n  }\r\n\r\n  /*\r\n    When the player finishes the stage, we destroy all the elements and we start the transition to the next scene.\r\n    */\r\n  endScene() {\r\n    /**\r\n     * Typescript Addition: This is pretty ugly! Phaser desperately needs proper generics to stop erasing types like this!\r\n     */\r\n\r\n    this.foeWaveGroup.children.entries().forEach(\r\n      (foe) => foe instanceof Foe && foe.shadow?.destroy()\r\n    );\r\n    this.foeGroup.children.entries().forEach(\r\n      (foe) => foe instanceof Foe && foe.shadow?.destroy()\r\n    );\r\n    this.shots.children.entries().forEach(\r\n      (shot) => shot instanceof Shot && shot.shadow.destroy()\r\n    );\r\n    this.foeShots.children.entries().forEach(\r\n      (shot) => shot instanceof FoeShot && shot.shadow.destroy()\r\n    );\r\n    this.time.delayedCall(\r\n      2000,\r\n      () => {\r\n        this.finishScene();\r\n      },\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /*\r\n    This is the callback for the end of the scene. We stop all the audio, we stop the scene and we start the transition to the next scene.\r\n    */\r\n  finishScene() {\r\n    this.game.sound.stopAll();\r\n    this.scene.stop(\"game\");\r\n    const scene = this.number < 5 ? \"transition\" : \"outro\";\r\n    this.scene.start(scene, {\r\n      next: \"game\",\r\n      name: \"STAGE\",\r\n      number: this.number + 1,\r\n    });\r\n  }\r\n\r\n  /*\r\n    The power-up looks the same but the effect is different. We keep increasing its value so we can apply the effect to the player. In this game, the power-up applies another shooting pattern.\r\n    */\r\n  updatePowerUp(player: Player, powerUp: PowerUp) {\r\n    player.powerUp = this.available[this.currentPowerUp];\r\n    this.currentPowerUp =\r\n      this.currentPowerUp + 1 === this.available.length\r\n        ? this.currentPowerUp\r\n        : this.currentPowerUp + 1;\r\n    this.registry.set(\"currentPowerUp\", this.currentPowerUp);\r\n  }\r\n\r\n  /*\r\n    This is the method we use to update the score of the player. We get the score from the registry and we update it. We also create a tween to make the score text blink.\r\n    */\r\n  updateScore(playerName: PlayerName, points = 0) {\r\n    const score = +this.registry.get(\"score_\" + playerName) + points;\r\n    this.registry.set(\"score_\" + playerName, score);\r\n    this.scores[playerName][\"scoreText\"].setText(\r\n      String(score).padStart(6, \"0\")\r\n    );\r\n    this.tweens.add({\r\n      targets: this.scores[playerName][\"scoreText\"],\r\n      duration: 200,\r\n      tint: { from: 0x0000ff, to: 0xffffff },\r\n      scale: { from: 1.2, to: 1 },\r\n      repeat: 2,\r\n    });\r\n  }\r\n}", "import SceneEffect from \"../gameobjects/scene_effect.ts\";\r\n\r\nexport default class Splash extends Phaser.Scene {\r\n  width!: number;\r\n  height!: number;\r\n  center_width!: number;\r\n  center_height!: number;\r\n  background!: Phaser.GameObjects.TileSprite;\r\n  theme:\r\n    | Phaser.Sound.NoAudioSound\r\n    | Phaser.Sound.HTML5AudioSound\r\n    | Phaser.Sound.WebAudioSound\r\n    | undefined;\r\n  gameLogoShadow!: Phaser.GameObjects.Image;\r\n  gameLogo!: Phaser.GameObjects.Image;\r\n  space!: Phaser.GameObjects.BitmapText;\r\n  constructor() {\r\n    super({ key: \"splash\" });\r\n  }\r\n\r\n  create() {\r\n    this.width = Number(this.sys.game.config.width);\r\n    this.height = Number(this.sys.game.config.height);\r\n    this.center_width = this.width / 2;\r\n    this.center_height = this.height / 2;\r\n    this.addBackground();\r\n    this.showLogo();\r\n    this.registry.set(\"currentPowerUp\", 0);\r\n    this.time.delayedCall(1000, () => this.showInstructions(), undefined, this);\r\n\r\n    this.input.keyboard?.on(\r\n      \"keydown-SPACE\",\r\n      () => this.transitionToChange(),\r\n      this\r\n    );\r\n\r\n    this.playMusic();\r\n  }\r\n\r\n  /*\r\n    The background, as the game, is a `tileSprite`, so we can scroll it to make it look like it's moving.\r\n    */\r\n  addBackground() {\r\n    this.background = this.add\r\n      .tileSprite(0, 0, this.width, this.height, \"background\")\r\n      .setOrigin(0)\r\n      .setScrollFactor(0, 1);\r\n  }\r\n\r\n  override update() {\r\n    this.background.tilePositionY -= 2;\r\n    this.background.tilePositionX += 2;\r\n  }\r\n\r\n  /*\r\n    We add this effect to change to another screen:\r\n    */\r\n  transitionToChange() {\r\n    new SceneEffect(this).simpleClose(this.startGame.bind(this));\r\n  }\r\n\r\n  startGame() {\r\n    if (this.theme) this.theme.stop();\r\n    this.scene.start(\"transition\", {\r\n      next: \"game\",\r\n      name: \"STAGE\",\r\n      number: 1,\r\n      time: 30,\r\n    });\r\n  }\r\n\r\n  /*\r\n    We add the logo, and then we tween it to make it move up and down.\r\n    */\r\n  showLogo() {\r\n    this.gameLogoShadow = this.add\r\n      .image(this.center_width, 250, \"logo\")\r\n      .setScale(0.7)\r\n      .setOrigin(0.5);\r\n    this.gameLogoShadow.setOrigin(0.48);\r\n    this.gameLogoShadow.tint = 0x3e4e43;\r\n    this.gameLogoShadow.alpha = 0.6;\r\n    this.gameLogo = this.add\r\n      .image(this.center_width, 250, \"logo\")\r\n      .setScale(0.7)\r\n      .setOrigin(0.5);\r\n\r\n    this.tweens.add({\r\n      targets: [this.gameLogo, this.gameLogoShadow],\r\n      duration: 500,\r\n      y: {\r\n        from: -200,\r\n        to: 250,\r\n      },\r\n    });\r\n\r\n    this.tweens.add({\r\n      targets: [this.gameLogo, this.gameLogoShadow],\r\n      duration: 1500,\r\n      y: {\r\n        from: 250,\r\n        to: 200,\r\n      },\r\n      repeat: -1,\r\n      yoyo: true,\r\n    });\r\n  }\r\n\r\n  /*\r\n    This is the music for the splash scene. We'll play it in a loop.\r\n    */\r\n  playMusic(theme = \"splash\") {\r\n    this.theme = this.sound.add(theme);\r\n    this.theme.stop();\r\n    this.theme.play({\r\n      mute: false,\r\n      volume: 0.5,\r\n      rate: 1,\r\n      detune: 0,\r\n      seek: 0,\r\n      loop: true,\r\n      delay: 0,\r\n    });\r\n  }\r\n\r\n  /*\r\n    Here we add the instructions to the scene.\r\n    */\r\n  showInstructions() {\r\n    this.add\r\n      .bitmapText(this.center_width, 450, \"wendy\", \"Arrows to move\", 60)\r\n      .setOrigin(0.5)\r\n      .setDropShadow(3, 4, 0x222222, 0.7);\r\n    this.add\r\n      .bitmapText(this.center_width, 500, \"wendy\", \"SPACE to shoot\", 60)\r\n      .setOrigin(0.5)\r\n      .setDropShadow(3, 4, 0x222222, 0.7);\r\n    this.add\r\n      .sprite(this.center_width - 95, 598, \"pello_logo\")\r\n      .setOrigin(0.5)\r\n      .setScale(0.3)\r\n      .setTint(0x000000)\r\n      .setAlpha(0.7);\r\n    this.add\r\n      .sprite(this.center_width - 100, 590, \"pello_logo\")\r\n      .setOrigin(0.5)\r\n      .setScale(0.3);\r\n\r\n    this.add\r\n      .bitmapText(this.center_width + 30, 590, \"wendy\", \"PELLO\", 50)\r\n      .setOrigin(0.5)\r\n      .setDropShadow(3, 4, 0x222222, 0.7);\r\n    this.space = this.add\r\n      .bitmapText(this.center_width, 680, \"wendy\", \"Press SPACE to start\", 60)\r\n      .setOrigin(0.5)\r\n      .setDropShadow(3, 4, 0x222222, 0.7);\r\n    this.tweens.add({\r\n      targets: this.space,\r\n      duration: 300,\r\n      alpha: { from: 0, to: 1 },\r\n      repeat: -1,\r\n      yoyo: true,\r\n    });\r\n  }\r\n}", "export default class Transition extends Phaser.Scene {\r\n  name!: string;\r\n  number!: number;\r\n  next!: string;\r\n  width!: number;\r\n  height!: number;\r\n  center_width!: number;\r\n  center_height!: number;\r\n  theme!:\r\n    | Phaser.Sound.NoAudioSound\r\n    | Phaser.Sound.HTML5AudioSound\r\n    | Phaser.Sound.WebAudioSound;\r\n  constructor() {\r\n    super({ key: \"transition\" });\r\n  }\r\n\r\n  init(data: { name: string; number: number; next: string }) {\r\n    this.name = data.name;\r\n    this.number = data.number;\r\n    this.next = data.next;\r\n  }\r\n\r\n  /*\r\n    In the transition, we show a message with the current stage and some advice, and then we load the next scene.\r\n    */\r\n  create() {\r\n    const messages = [\r\n      \"Fire at will\",\r\n      \"Beware the tanks\",\r\n      \"Shoot down the UFOs\",\r\n      \"FINAL BOSS\",\r\n    ];\r\n\r\n    this.width = Number(this.sys.game.config.width);\r\n    this.height = Number(this.sys.game.config.height);\r\n    this.center_width = this.width / 2;\r\n    this.center_height = this.height / 2;\r\n    this.sound.add(\"stageclear2\").play();\r\n    this.add\r\n      .bitmapText(\r\n        this.center_width,\r\n        this.center_height - 50,\r\n        \"wendy\",\r\n        messages[this.number - 1],\r\n        100\r\n      )\r\n      .setOrigin(0.5);\r\n    this.add\r\n      .bitmapText(\r\n        this.center_width,\r\n        this.center_height + 50,\r\n        \"wendy\",\r\n        \"Ready player 1\",\r\n        80\r\n      )\r\n      .setOrigin(0.5);\r\n\r\n    this.playMusic(\"music\" + (this.number !== 4 ? this.number : 1));\r\n    this.time.delayedCall(2000, () => this.loadNext(), undefined, this);\r\n  }\r\n\r\n  loadNext() {\r\n    this.scene.start(this.next, {\r\n      name: this.name,\r\n      number: this.number,\r\n      time: this.time,\r\n    });\r\n  }\r\n\r\n  /*\r\n    The music of the stage is loaded and played in this transition.\r\n    */\r\n  playMusic(theme = \"music1\") {\r\n    this.theme = this.sound.add(theme);\r\n    this.theme.play({\r\n      mute: false,\r\n      volume: 0.4,\r\n      rate: 1,\r\n      detune: 0,\r\n      seek: 0,\r\n      loop: true,\r\n      delay: 0,\r\n    });\r\n  }\r\n}", "export default class Outro extends Phaser.Scene {\r\n  width!: number;\r\n  height!: number;\r\n  center_width!: number;\r\n  center_height!: number;\r\n  introLayer!: Phaser.GameObjects.Layer;\r\n  splashLayer!: Phaser.GameObjects.Layer;\r\n  text!: string[];\r\n  player1!: Phaser.GameObjects.Sprite;\r\n\r\n  constructor() {\r\n    super({ key: \"outro\" });\r\n  }\r\n\r\n  create() {\r\n    this.width = Number(this.sys.game.config.width);\r\n    this.height = Number(this.sys.game.config.height);\r\n    this.center_width = this.width / 2;\r\n    this.center_height = this.height / 2;\r\n    this.introLayer = this.add.layer();\r\n    this.splashLayer = this.add.layer();\r\n    this.text = [\r\n      \"Score: \" + this.registry.get(\"score_player1\"),\r\n      \"The evil forces among with\",\r\n      \"their tyrannical leader GUINXU\",\r\n      \"were finally wiped out.\",\r\n      \"Thanks to commander Alva\",\r\n      \"And the powah of the Plenny Shakes\",\r\n      \" - press enter - \",\r\n    ];\r\n    this.showHistory();\r\n    this.showPlayer();\r\n\r\n    this.input.keyboard?.on(\"keydown-ENTER\", this.startSplash, this);\r\n  }\r\n\r\n  /*\r\n    These are the functions to show the dramatic story of the game, line by line.\r\n    */\r\n  showHistory() {\r\n    this.text.forEach((line, i) => {\r\n      this.time.delayedCall(\r\n        (i + 1) * 2000,\r\n        () => this.showLine(line, (i + 1) * 60),\r\n        undefined,\r\n        this\r\n      );\r\n    });\r\n    this.time.delayedCall(4000, () => this.showPlayer(), undefined, this);\r\n  }\r\n\r\n  showLine(text: string, y: number) {\r\n    const line = this.introLayer.add(\r\n      this.add\r\n        .bitmapText(this.center_width, y, \"wendy\", text, 50)\r\n        .setOrigin(0.5)\r\n        .setAlpha(0)\r\n    );\r\n    this.tweens.add({\r\n      targets: line,\r\n      duration: 2000,\r\n      alpha: 1,\r\n    });\r\n  }\r\n\r\n  /*\r\n    This will just show the \"player1\" sprite.\r\n    */\r\n  showPlayer() {\r\n    this.player1 = this.add\r\n      .sprite(this.center_width, this.height - 200, \"player1\")\r\n      .setOrigin(0.5);\r\n  }\r\n\r\n  /*\r\n    This will start the splash screen.\r\n    */\r\n  startSplash() {\r\n    this.scene.start(\"splash\");\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["Phaser", "radius", "TYPES", "TYPES", "point", "Phaser"]
}
